@node Development, gEDA file format, Communication, Top
@chapter Development
@cindex development

Most of Lepton tools are written in Guile Scheme and work the same way
independently of their location.  This provides an interesting
opportunity: you can copy any of them to your home directory and play
with it, edit and run without touching anything else.

@menu
* Debugging::                   Debugging the tools
* Doxygen documentation::       Developer documentation
* Collaboration::               Working together to make Lepton better
@end menu

@node Debugging, Doxygen documentation, Development, Development
@section Debugging the tools
@cindex debug
@cindex debugging

Most of Lepton programs are written in Guile Scheme.  GUI tools are
based on Glib and GTK libraries.  It's worth to be aware of how to
debug the code in order to fix or report issues.

@menu
* Debug Scheme code::
* Debuggers::
* Debug Glib and GTK::
@end menu

@node Debug Scheme code, Debuggers, Debugging, Debugging
@subsection Debug Guile Scheme code
@cindex debug Scheme code

Sometimes code in Scheme may fail and output a backtrace looking out
something like this:

@example
Backtrace:
In unknown file:
?: 19 [apply-smob/1 #<catch-closure 55e36cf0a020>]
In ice-9/boot-9.scm:
66: 18 [call-with-prompt prompt0 ...]
...
many more lines
...
In ice-9/boot-9.scm:
105: 1 [#<procedure 55e36e0eee80 at ice-9/boot-9.scm:100:6
(thrown-k . args)> wrong-type-arg ...]
In unknown file:
?: 0 [apply-smob/1 #<catch-closure 55e36e0edae0> wrong-type-arg ...]

ERROR: In procedure apply-smob/1:
ERROR: In procedure struct-vtable: Wrong type argument in position 1
(expecting struct): #f
@end example

The output is incomprehensible, isn't it?  The issue gets worse due to
abbreviation of the output, look at the ellipses in some of the lines.

The length of the output lines depends on the environment variable
@env{COLUMNS} set in your environment.  Sometimes you can improve
readability of such errors by setting the variable to a bigger value.
For instance, if you launch your program in terminal, do:

@example
echo $COLUMNS
@print{} 106
export COLUMNS=1000
lepton-schematic
@end example

You can do it in your Scheme code as well:

@lisp
(setenv "COLUMNS" "1000")
@end lisp

Sometimes you have to find the code you could insert such a line in.
For example, the code of Lepton Scheme unit tests contains this line
in @file{unit-test.scm}, though it is commented out as this is
unnecessary in most cases.

Another approach is using of interactive mode of Guile or one of
Lepton tools to debug your code.  Load your modules or files with code
in this mode one by one and see what's wrong with them.
@command{lepton-netlist} and @command{lepton-symcheck} support this.

If you want to debug some particular module, you could use your
current Lepton installation.  Say, if your Lepton is installed in
@file{/usr/local/}, run @command{guile} and in its prompt do:

@lisp
(add-to-load-path "/usr/local/share/lepton-eda/scheme")
(use-modules (lepton m4))
@end lisp

This is how all Lepton tools are initialized internally.  The first
line adds path to all Lepton modules.  The module @code{(lepton m4)}
is loaded then for initialization of various @code{liblepton}'s
variables.  After that, you'll be able to play with Lepton modules.

To automate the above trick, you might want to add the two lines in
your local @command{guile} configuration file, typically,
@file{~/.guile}.

@node Debuggers, Debug Glib and GTK, Debug Scheme code, Debugging
@subsection Debug C code with debugger tools
@cindex debuggers

One of the most popular tools to debug C code is @command{gdb}.  The
issue with @command{gdb} is that it cannot work with programs written
in Scheme and most of Lepton tools are such programs.  This is easily
solvable.  Instead of the call

@example
gdb lepton-schematic
@end example

@noindent
use

@example
gdb --args guile -s /usr/local/bin/lepton-schematic
@end example

@noindent
because this is the very command which is used internally in the
@command{lepton-schematic} script.  Please note using of the full path
to the script here.

@node Debug Glib and GTK,  , Debuggers, Debugging
@subsection Debug C code based on Glib and GTK
@cindex debug glib
@cindex debug gtk

Sometimes you may encounter critical warnings by @code{glib} or
@code{gtk}, which look like this:

@example
GLib-GObject-CRITICAL **: ...
@end example

In order to debug them, you need to know the way of reproducing them.
Then, you can use the following command to fiddle with them in
@command{gdb}:

@example
G_DEBUG=fatal_criticals gdb --args \
  guile -s /usr/local/bin/lepton-schematic
@end example

If you want to see a lot of lowlevel debugging info, run
@example
G_MESSAGES_DEBUG=all lepton-schematic
@end example

@node Doxygen documentation, Collaboration, Debugging, Development
@section Developer documentation
The @code{doxygen} files are used by developers to learn better the
relations between the C functions in the project they are working on.
Lepton EDA has a gross C code base so it is probably one of a
convenient ways to discover things in it.

As the @url{http://www.doxygen.nl, Doxygen project} is also
continuously improving, it is good to every now and then (say, once
per a release) update the @code{doxygen} files in Lepton.  Basically,
the procedure is as follows:
@example
cd lepton-eda/libleptonattrib/docs;
doxygen -u libleptonattrib.dox
@end example

It is necessary to do so in any @code{doxygen} documentation directory
of the libraries included in Lepton.


@node Collaboration,  , Doxygen documentation, Development
@section Let's make Lepton better

@menu
* Bugs and features::
@end menu

@node Bugs and features,  , Collaboration, Collaboration
@subsection Working on bug or feature requests

In order to work on Lepton at Github, you have to register there
first.

If you found a new bug or want to file a feature request, please
report it.  Any already filed bugs and feature requests must be
triaged periodically as well to make sure they still exist and not
solved yet.  Below are some guidance of how to deal with all that.

@subsubsection Triaging bugs

@itemize @bullet

@item
First look through
@url{https://github.com/lepton-eda/lepton-eda/issues, Lepton issues}
and @url{https://github.com/lepton-eda/lepton-eda/pulls, Pull
requests} to learn if your issue is already known or someone has
offered a solution for it.

@item
Grab @code{git HEAD} of the Lepton repository (if you don't have it
already) and try to confirm whether the bug is still present in it or
not.  Please report the current status of the issue, if it is still
present or not.

@item
If the bug is still present, report the commit or Lepton version you
found it in.  If the bug is absent, make a comment about this or, if
you have permissions to do it, close it as resolved.

@item
If you have a good testcase of how to reproduce the bug, or you can
triage an already existing testcase, please report this as well.

@item
For existing issues and PRs, add appropriate labels if you feel like
they miss ones.  For example, it could be the tool name the bug was
reported against (e.g. @code{lepton-schematic}), its importance
(e.g. @code{wishlist} for feature requests, or @code{crash} for bugs),
validity (e.g. @code{invalid}), part of the project it is related to
(say, @code{doc} or @code{build}), and any other aspect you think is
important to emphasize.

@end itemize
