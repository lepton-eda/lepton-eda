@node Installation, Configuration, Overview, Top
@chapter Installation

Installation of Lepton is pretty simple on many operating systems and
distributions supporting pre-built binary packages.  Just use your
favorite package manager to install the package.  For example, on
Debian or Ubuntu, you could use @command{synaptic}, @command{apt-get},
or @command{aptitude} for installation.  It doesn't matter which
interface you use, GUI or CLI. For instance:
@example
sudo aptitude install lepton-eda
@end example

However, in some cases or on some systems you may want to install
Lepton from source code.  The order is as follows.
@itemize
@item
Download the source code:
@item
Compile it and install:
@example
cd the-directory-with-lepton-eda
autoreconf -ivf && ./configure && make && sudo make install
@end example
Call for @command{autoreconf} is not needed if you download sources as
a tarball of some version.
@item
In some cases, when, for example, a new library is installed, you may
need to launch @command{ldconfig} as well:
@example
sudo ldconfig
@end example
@end itemize

@menu
* Supported operating systems::
* Dependencies::
* Troubleshooting dependencies::
* Installation from source::
* Installation from git::
* Out-of-source build::
* Configure options::
* Hardcode library names for Guile::
@end menu


@node Supported operating systems, Dependencies, Installation, Installation
@section Supported operating systems
@cindex lepton-eda packages
@cindex lepton-eda ports
@cindex lepton-eda, supported distributions
@cindex lepton-eda, supported operating systems

Lepton can be built and run on many @emph{Linux} and @emph{*nix}
systems as well as on @emph{MS Win} under @emph{Cygwin} and on
@emph{Mac}.  As of now,
@url{https://github.com/lepton-eda/lepton-eda/wiki/OSX, there are some
troubles} with building it on the latter though you can install a
virtual machine with some Linux OS, e.g., @emph{Ubuntu}, and install
it there.

The @url{https://github.com/lepton-eda/lepton-eda/wiki/Portability,
Lepton EDA Portability} wiki page contains an incomplete list of
systems on which you can install Lepton either from scratch, or using
the system's package manager, as well as some recipes on how to do it.

Here is probably an incomplete list of links to packages existing for
various operating systems:

@table @emph

@item Debian and derivatives (Ubuntu, Kubuntu, Devuan, ...)
@url{https://packages.debian.org/source/buster/lepton-eda, lepton-eda
package} maintained by Bdale Garbee

@item FreeBSD and derivatives (DragonFly BSD and Ghost Bsd)
@url{https://www.freshports.org/cad/lepton-eda, lepton-eda port} by
dmn

@item OpenBSD
@url{https://github.com/graahnul-grom/openbsd-lepton-eda, lepton-eda
port} by dmn

@item Slackware
@url{https://slackbuilds.org/repository/14.2/development/lepton-eda/,
lepton-eda build} by dmn

@item Gentoo
@url{https://github.com/domichel/GenCool/tree/master/sci-electronics/lepton-eda,
lepton-eda ebuild} by Dominique Michel

@item Fedora
@url{https://github.com/graahnul-grom/fedora-lepton-eda, lepton-eda
spec} by dmn

@item Arch
@url{https://aur.archlinux.org/packages/lepton-eda-git, lepton-eda}
and @url{https://aur.archlinux.org/packages/lepton-eda-gtk3-git,
lepton-eda with gtk3 support} by Ian Glen

@item Cygwin
Please see @url{https://github.com/lepton-eda/lepton-eda/wiki/Cygwin,
this article} initially contributed by Mario Giovinazzo on how to
install Lepton on @emph{Cygwin}.

@end table


@node Dependencies, Troubleshooting dependencies, Supported operating systems, Installation
@section Dependencies

In order to compile Lepton from the distributed source archives, you
@strong{must} have the following tools and libraries installed:
@itemize
@item
A C/C++ compiler and standard library (@command{gcc}/@command{glibc}
are recommended, though you may use @command{clang} instead).
@item
@url{http://pkgconfig.freedesktop.org, The pkg-config tool} for
managing shared libraries.
@item
@url{http://www.gnu.org/software/guile, Guile} ("GNU's Ubiquitous
Intelligent Language for Extensions"), version 2.2.0 or later.
@item
@url{http://www.gtk.org, GTK+} (the Gimp Toolkit), version 2.24.0 or
later.
@item
@url{http://www.gnu.org/software/gettext, GNU gettext}, version 0.18
or newer.
@item
@url{http://flex.sourceforge.net, The lex tool} for generating lexical
scanners.  The @command{flex} implementation is recommended.
@item
The @command{awk} tool for data processing.
@url{http://www.gnu.org/software/gawk, GNU Awk} (@command{gawk}) is
recommended.
@end itemize

The following tools and libraries are @emph{highly recommended}:
@itemize
@item
@url{http://www.gnu.org/software/groff, GNU troff} (@command{groff}).
@item
@url{http://freedesktop.org/Software/shared-mime-info, The
freedesktop.org MIME info database}.
@item
@url{http://www.freedesktop.org/software/desktop-file-utils, The
freedesktop.org utilities} for manipulating @file{.desktop} files.
@end itemize

The following tools and libraries are optional:

@itemize
@item
@url{http://www.etla.net/libstroke, libstroke} a stroke and gesture
recognition library.  If this is available, @command{lepton-schematic}
will support mouse gesture recognition.
@end itemize

@node Troubleshooting dependencies, Installation from source, Dependencies, Installation
@section Troubleshooting dependencies

Sometimes, @code{./configure} says it cannot find a library while
the library is installed.  Really, it may just not find its headers
which live in a separate package.  Many modern operating system
distributions split a library into two packages:

@enumerate
@item
A package with binary files, say a @file{libfoo} package, which
contains the files necessary to @emph{run} programs which use
@file{libfoo}.
@item
A @dfn{development package}, @file{libfoo-dev} or @file{libfoo-devel},
which contains the files necessary to @emph{compile} programs which
use @file{libfoo}.
@end enumerate

If you're having problems, make sure that you have all of the
necessary development packages installed.


@node Installation from source, Installation from git, Troubleshooting dependencies, Installation
@section Installation from a source archive

First extract the archive to a sensible place:
@example
tar -xzvf lepton-eda-@value{VERSION}.tar.gz &&
cd lepton-eda-@value{VERSION}
@end example

Run the configuration script.  You'll probably want to specify a
custom directory to install Lepton EDA to, for example:
@example
./configure --prefix=$HOME/lepton
@end example

You can then compile Lepton:
@example
make
@end example

And install it (if you used a @option{--prefix} outside your
@env{$HOME} directory, you may need to run this as @emph{root}):

@example
make install
@end example

@node Installation from git, Out-of-source build, Installation from source, Installation
@section Installation from the git repository

Lepton uses the @command{git} version control system.  If you wish to
try out the very latest version of Lepton, you will need to install
some extra tools @emph{in addition to} the ones listed above:

@itemize
@item
The @url{http://git-scm.com, git version control tool}, version 1.6 or
newer.
@item
@url{http://www.gnu.org/software/automake, GNU Automake}, version
1.11.0 or newer.
@item
@url{http://www.gnu.org/software/autoconf, GNU Autoconf}, version 2.60
or newer.
@item
@url{http://www.gnu.org/software/libtool, GNU Libtool}.
@item
@url{http://www.gnu.org/software/texinfo, GNU Texinfo documentation
system}.

Note that on some distributions the @TeX{} support for Texinfo is
packaged separately.
@end itemize

Once you have these installed, you need to clone the Lepton git
repository:

@example
git clone https://github.com/lepton-eda/lepton-eda.git
@end example

To generate the configure script, run:

@example
autoreconf -ivf
@end example

You can then proceed to configure and build Lepton as described above.

@node Out-of-source build, Configure options, Installation from git, Installation
@section Out-of-source build
@cindex out-of-source build
@cindex VPATH build

@emph{Out-of-source} or @emph{VPATH} build lets you keep your Lepton
source directory clean and get any built files in a separate
directory.  Otherwise it's no different from other kinds of
compilation.  To build in a separate directory, just make it, go to
it, and run the build commands described in the previous sections.
For example, supposed the current working directory is the root
directory of your Lepton repository, you can do:

@example
mkdir ./build/
cd ./build/
autoreconf -ivf .. && ../configure && make && sudo make install
@end example

Please note @code{..} in the above commands, it ensures
@emph{autotools} tools will work in the parent directory of
@file{build/}, that is, in the source directory, and run
@command{configure} from that directory as well.


@node Configure options, Hardcode library names for Guile, Out-of-source build, Installation
@section Configure options
@cindex configure options
@cindex --with-gtk3
@cindex --disable-attrib
@cindex --enable-contrib
@cindex --enable-guild
@cindex --disable-doc

The following command in the build directory

@example
./configure --help
@end example

will let you see all options available.  Here we'll notice only those
of them that may be of special interest for the user.

@table @option

@item --enable-guild
turns on support of native compilation of Scheme code by
@command{guild}.  If it is not used, the Lepton Scheme tools will be
compiled at the time of first launching, which may significantly
increase the first time launching duration.

@item --with-gtk3
turns on support for GTK3 library. @xref{Installation of
lepton-attrib} for more information on what additional libraries are
needed to install @attrib.

@item --disable-attrib
turns off building and installing @attrib.

@item --disable-doc
turns off building and installing documentation, including
manuals, wiki, readme files and man pages.

@item --enable-contrib
Build and installation of several contributed tools are disabled by
default.  @xref{Overview} for info on what tools can be additionally
installed.
@end table

@node Hardcode library names for Guile,  , Configure options, Installation
@section Hardcode library names for Guile
@cindex hardcode library names
@cindex USE_LDCONFIG
@cindex use ldconfig

On some systems you would want to hardcode file names of libraries
required by Lepton when compiling the code.  It is true, for example,
on Debian and its derivatives.  The issue you may encounter on Debian
and several other systems is partitioning of header files and binaries
of a library and putting them into different files and, to make them
harder for using in Guile, extending file name extensions of library
binaries and their symlinks by adding some info at the end.  So, for
instance, a binary library name may look like
@file{libglib-2.0.so.0.7000.1} and its symlink name like
@file{libglib-2.0.so.0}.  Guile, on the other hand, cannot find such
libraries because it uses @emph{canonical} file extensions for looking
up for them, which is @file{.so} on Linux, and thus would look for
@file{libglib-2.0.so} in this example.  It could never use all the
convoluted and complex algorithms @command{libtool} and other C
compiler tools use, otherwise it would itself turn into
@emph{autotools} along with @command{gcc} or @command{cmake}.
Symlinks with canonical names are available on Debian in
@emph{development} packages.  It's OK to install them when the user
wants to build Lepton from sources as they are also required for
compiling C code.  However, a mere mortal who installs Debian package
of Lepton usually doesn't want to have them installed so the package
should be prepared for it.  Or, she would like to clean up her system
and remove the development packages.  In both cases, hardcoding
existing library file names in Scheme code is sufficient for Lepton
tools to work correctly, and Lepton supports it by using the
environment variable @var{USE_LDCONFIG}.  It should be set to the
absolute filename of @command{ldconfig}, the utility that may fetch
and report names of all libraries installed on the system.  When
building Lepton, it may be used on the @command{configure} stage as
follows:

@example
./configure USE_LDCONFIG=/sbin/ldconfig
@end example
