@node Master attribute list, net= attribute mini-HOWTO, gEDA file format, Top
@chapter Master attribute list

The prototype of this document, originally written
by @emph{Ales Hvezda} for gEDA/gaf, you can find at
@url{http://wiki.geda-project.org/geda:master_attributes_list}

Attributes in Lepton EDA is the way to provide specific information
about schematics as well as components and nets used in it.  The
information is then processed by Lepton tools to make it available for
using in various workflows such as, e.g., SPICE simulation or PCB
creation.

@quotation Note
Unlike geda-gaf, Lepton EDA supports attributes with empty values.
@xref{Attribute compatibility} for other improvements in attribute
support.
@end quotation


@menu
* What are Attributes?::        What are attributes in a nutshell?
* Symbol only Attributes::      Attributes meaningful only for symbols.
* Schematic only Attributes::   Attributes meaningful only for schematics.
* Symbol and Schematic Attributes::  Attributes used ubiquitously.
* Obsolete Attributes::         Attributes no longer processed by the tools.
* Attribute compatibility::     Notable changes in Lepton compared to geda-gaf
@end menu

@node What are Attributes?, Symbol only Attributes, Master attribute list, Master attribute list
@section What are Attributes?

Attributes in the gEDA/gaf system are nothing more than text items
which take on the form: @attr{name=value}.  Name can be anything just
as long as it doesn't contain a equals sign.  Value can also be
anything just as long as it is something (vs nothing).  @attr{name=}
(without a value part) is not a valid attribute.  Also, there cannot
be any spaces immediately before or after the equals sign.

Attributes can be attached to some part of the symbol.  If the
attribute conveys information specific to an object, then the
attribute should be attached directly to the object, otherwise the
attribute should be free standing or floating.  Free standing
attributes just exist in the symbol file as text items which take on
the form @attr{name=value}.


@node Symbol only Attributes, Schematic only Attributes, What are Attributes?, Master attribute list
@section Symbol only Attributes


@menu
* device attribute::
* graphical attribute::
* description attribute::
* author attribute::
* comment attribute::
* pinseq attribute::
* pinnumber attribute::
* pintype attribute::
* pinlabel attribute::
* numslots attribute::
* slotdef attribute::
* footprint attribute::
* documentation attribute::
@end menu

@node device attribute, graphical attribute, Symbol only Attributes, Symbol only Attributes
@subsection device attribute

@attr{device=} is the device name of the symbol

@attr{device=} should be placed somewhere in the symbol and made
invisible.  This is a free standing or floating attribute.  If the
object is a graphic then @attr{device=} should be set to none
(@attr{device=none}) and attach a @attr{graphical=} attribute
(@ref{graphical attribute}).  Do not confuse this attribute with just
having a text label which the device name.  Do not put spaces into the
device name; there are some programs which dislike spaces in the
device specifier.  Generally the device name is in all caps.

@emph{Examples:}
@example
device=7400
device=CONNECTOR_10
device=NPN_TRANSISTOR
@end example

@node graphical attribute, description attribute, device attribute, Symbol only Attributes
@subsection graphical attribute

Symbols which have no electrical or circuit significance need a
@attr{graphical=1} attribute.  Symbols like titleboxes are purely
graphical symbols.  Any symbol which has @attr{graphical=1} is ignored
by @netlist.

@attr{graphical=1} should exist somewhere in the symbol and made
invisible.  This is a free standing or floating attribute.  Don't
forget to set @attr{device=none} (@ref{device attribute}).

@emph{Example:}
@example
graphical=1
@end example

@node description attribute, author attribute, graphical attribute, Symbol only Attributes
@subsection description attribute

The @attr{description} attribute provides a simple one line
description of what the symbol is supposed to represent.

@emph{Example:}
@example
description=4 NAND gates with 2 inputs
@end example

@node author attribute, comment attribute, description attribute, Symbol only Attributes
@subsection author attribute

The @attr{author} attribute identifies the name of the author of this
symbol and their e-mail address.  This attribute is optional, but it
is nice to know who created which symbols.  It also serves the purpose
of known who to contact if there are questions about the intent(s) of
the symbol.  This attribute is free form and it can also include
people's names who modified the symbol as well as multiple e-mail
addresses.  It is probably also a good idea to obfuscate the e-mail
address so it is not harvested for spam purposes.

@emph{Example:}
@example
author=Ales Hvezda ahvezdaATgeda.seul.org
@end example

@node comment attribute, pinseq attribute, author attribute, Symbol only Attributes
@subsection comment attribute

The @attr{comment} attribute can contain anything.  This attribute can
convey any additional information which might not fit into any other
attribute.  There can be multiple instances of this attribute.

@emph{Example:}
@example
comment=This is a comment inside a symbol
@end example

@node pinseq attribute, pinnumber attribute, comment attribute, Symbol only Attributes
@subsection pinseq attribute

This attribute is used to give each pin an unique number or sequence.
All pins must have a @attr{pinseq=#} attribute attached to the pin
object.  This attribute should be hidden.  This attribute is used
extensively by @schematic{} and @netlist.

In some backends (especially the SPICE backend), @netlist{} will
output pins in the order of increasing pin sequence.  The sequence
numbers start at 1 and should increase without skipping any numbers.
This attribute is not the pin number (i.e. device pin numbers, like
GND is 7 on TTL).  For pin numbers see the @attr{pinnumber} attribute
(@ref{pinnumber attribute}).

@emph{Examples:}
@example
pinseq=1
pinseq=2
pinseq=3
@end example

This attribute replaces the obsolete @attr{pin#=#} attribute.


@node pinnumber attribute, pintype attribute, pinseq attribute, Symbol only Attributes
@subsection pinnumber attribute

This attribute is the pin number (i.e. like @code{GND} is @code{7} on
74 TTL).  All pins must have a @attr{pinnumber=#} attribute attached
to the pin object.

You can have numbers or letters for the value.  This attribute should
be visible with the value only visible.  You also need a @attr{pinseq}
attribute (@ref{pinseq attribute}).

@emph{Examples:}
@example
pinnumber=1
pinnumber=13
pinnumber=A0
@end example

This attribute replaces the obsolete @attr{pin#=#} attribute.


@node pintype attribute, pinlabel attribute, pinnumber attribute, Symbol only Attributes
@subsection pintype attribute

Each pin must have a @attr{pintype=value} attribute attached to it and
should be make hidden.  Table 1 shows valid values for this attribute.

This attribute is not used extensively in the symbol library, but it
will be used for DRC and netlisting.  Use ``passive'' if no other type
matches.

@emph{Examples:}
@example
pintype=clk
pintype=in
pintype=pas
@end example

@float Table,table:pintype
@caption{pintype values}

@table @samp
@item in
Input
@item out
Output
@item io
Input/Output
@item oc
Open collector
@item oe
Open emitter
@item pas
Passive
@item tp
Totem pole
@item tri
Tristate (high impedance)
@item clk
Clock
@item pwr
Power/Ground
@end table

@end float

@node pinlabel attribute, numslots attribute, pintype attribute, Symbol only Attributes
@subsection pinlabel attribute

This attribute labels a pin object.  This attribute is primarily used
by @netlist{} to support hierarchical designs.

This attribute must be attached to the pin and be left visible.
Please make this attribute green (instead of the default attribute
yellow).

@emph{Examples:}
@example
pinlabel=A0
pinlabel=DATA1
pinlabel=CLK
@end example

@node numslots attribute, slotdef attribute, pinlabel attribute, Symbol only Attributes
@subsection numslots attribute

If a component has multiple slots in a physical package (such as a
7400 (NAND) which has 4 NANDs per package) then you need a
@attr{numslots=#} attribute.  The # is the number of slots that are in
a physical device.  @attr{numslots=#} should exist somewhere in the
symbol and be made invisible.  This is a free standing or floating
attribute.  If the symbol does not need slotting, then put
@attr{numslots=0} into the symbol file.

@emph{Example:}
@example
numslots=4
@end example

@node slotdef attribute, footprint attribute, numslots attribute, Symbol only Attributes
@subsection slotdef attribute

If a component has multiple slots in a physical package then you must
attach a @attr{slotdef=slotnumber:#,#,#...} for every device inside
the physical package.

The slotnumber corresponds to the slot number.  The colon after the
slot number is required.  For example, if a device has 4 slots then
there would be @attr{slotdef=1:...}, @attr{slotdef=2:...},
@attr{slotdef=3:...}, and @attr{slotdef=4:...} attributes somewhere in
the symbol and be made invisible.  This is a free standing or floating
attribute.

The @attr{#}'s have a one-to-one correspondence to the @attr{pinseq}
attributes and specify which @attr{pinnumber=#} is used during display
(@schematic{}) or netlisting (@netlist{}).

It is recommended that all symbols which have slots have a
@attr{slot=1} attribute (@ref{slot attribute}) attached in the same
fashion as the @attr{device} attribute (@ref{device attribute}).

See @file{7400-1.sym} as a concrete example.

@emph{Examples:}
@example
slotdef=1:1,2,3
slotdef=2:4,5,6
slotdef=3:7,8,9
@end example

This attribute replaces the obsolete @attr{slot#=#} attribute.


@node footprint attribute, documentation attribute, slotdef attribute, Symbol only Attributes
@subsection footprint attribute

@attr{footprint=package_name} should exist somewhere in the symbol and
be made invisible.  This attribute is used by @netlist{} and primarily
for the PCB package.

Attach this attribute just like the @attr{device} (@ref{device
attribute}) attribute.  This is a free standing or floating attribute.

@attr{package_name} is the pcb footprint or package type like
@code{DIP14} or @code{DIP40}.  Although this attribute in principle is
pcb package dependent, gEDA/gaf conventions exist to make this
attribute as portable as possible, allowing for easy collaboration and
sharing between users.
@url{http://wiki.geda-project.org/geda:pcb_footprint_naming_conventions,
Footprint naming conventions}.

If the symbol does not have a footprint, then the value of
@attr{footprint=} should be set to @code{none}.  If the footprint must
be overridden in a schematic, then the value of @attr{footprint=}
should be set to @code{none}.  If the footprint is not known, then the
value of @attr{footprint=} should be set to @code{unknown}.


@node documentation attribute,  , footprint attribute, Symbol only Attributes
@subsection documentation attribute

@attr{documentation=documentation_locator} may exist somewhere in the
symbol and be made invisible.  This attribute is used by Lepton to
find relevant documentation for the symbol, or rather, the device or
component associated with the symbol.

Attach this attribute just like the @attr{device} attribute
(@pxref{device attribute}).  This is a freestanding or floating
attribute.

@code{documentation_locator} is either the base filename of the
documentation, or it is the complete Internet URL (Uniform Resource
Locator).  If it is the filename, an attempt will be made to search
for it in the current working directory, and then in the system and
user documentation directories, (usually
@file{$@{prefix@}/share/doc/lepton-eda} and
@file{~/.local/share/lepton-eda/doc/lepton-eda}, check the output of
functions @code{user-doc-dir} and @code{sys-doc-dir} in the
@code{(schematic doc)} module to make it sure).

@emph{Filename example:}
@example
documentation=sn74ls00.pdf
@end example

@emph{URL example:}
@example
documentation=http://www-s.ti.com/sc/ds/sn74ls00.pdf
@end example

@node Schematic only Attributes, Symbol and Schematic Attributes, Symbol only Attributes, Master attribute list
@section Schematic only Attributes


@menu
* netname attribute::
* source attribute::
@end menu

@node netname attribute, source attribute, Schematic only Attributes, Schematic only Attributes
@subsection netname attribute

This attribute should be attached to a net object to give it a name.
Multiple net names for connected net segments is discouraged.  All
nets which have the same value are considered electrically connected.
This attribute is not valid inside symbols (as you cannot have nets
inside of symbols).

@emph{Examples:}
@example
netname=DATA0_H
netname=CLK_L
@end example

@node source attribute,  , netname attribute, Schematic only Attributes
@subsection source attribute

The @attr{source=} attribute is used to specify that a symbol has
underlying schematics.  This attribute is attached directly to a
component.

This attribute should only be attached to instantiated components in
schematics.  Attach the attribute to a component and specify the
filename (not the path) of the underlying schematic (like
@file{block.sch}) for the value.  The specified schematic must be in a
source-library path.  @xref{Legacy configuration}.  This attribute can
be attached multiple times with different values which basically means
that there are multiple underlying schematics.

@emph{Examples:}
@example
source=underlying.sch
source=memory.sch
@end example


@node Symbol and Schematic Attributes, Obsolete Attributes, Schematic only Attributes, Master attribute list
@section Symbol and Schematic Attributes


@menu
* refdes attribute::
* slot attribute::
* net attribute::
* value attribute::
* symversion attribute::
* dist-license attribute::
* use-license attribute::
@end menu

@node refdes attribute, slot attribute, Symbol and Schematic Attributes, Symbol and Schematic Attributes
@subsection refdes attribute

This attribute is used to specify the reference designator to a
particular instantiated component.  It must be on @emph{ALL}
components which have some sort of electrical significance.  This
attribute can also be on the inside of a symbol (it will be promoted,
i.e. attached to the outside of the symbol, if it is visible) to
provide a default refdes value (such as @code{U?}).  Usually this
attribute is composed by a prefix (@code{U} for example) and a number
(different for each component).

@emph{Examples:}
@example
refdes=U1
refdes=R10
refdes=CONN1
@end example

@menu
* refdes naming restrictions::
* refdes naming conventions::
@end menu

@node refdes naming restrictions, refdes naming conventions, refdes attribute, refdes attribute
@subsubsection refdes naming restrictions

@schematic{} will accept any string as a value for the refdes.
However, some back-ends to @netlist{} impose restrictions on the
allowed syntax.

Specifically, @schpcb{} requires:
@itemize
@item
No spaces.

@item
No hyphens.  This might upset the M4 macro language potentially used
to generate footprints.  ``@code{_}'' is OK.

@item
Any lower case suffix is ignored.  This is so you can, place four
discrete @code{NAND} gates on the schematic called @code{U1a},
@code{U1b}, @code{U1c}, and @code{U1d}.  They will netlist into a
single footprint named @code{U1}.

@item
Non-ASCII characters like @samp{ü}, @samp{ö}, @samp{ä}, @samp{ß} will
not print in pcb.

@end itemize


@node refdes naming conventions,  , refdes naming restrictions, refdes attribute
@subsubsection refdes naming conventions

There is a convention of the reference designator used for each kind
of component.  Here are some of them (substitute a cardinal value for
<n>):
@multitable @columnfractions .5 .5
@headitem
Prefix @tab Component type
@item
R<n>
@tab Resistor
@item
RN<n>
@tab Resistor Network
@item
FB<n>
@tab Ferrite Bead
@item
L<n>
@tab Inductor
@item
C<n>
@tab Capacitor
@item
B<n>
@tab Battery
@item
F<n>
@tab Fuse
@item
J<n>
@tab Connector
@item
P<n>
@tab Connector (usually plugs that mate with J<n>)
@item
K<n>
@tab Relay
@item
S<n>
@tab Switch
@item
T<n>
@tab Transformer
@item
TP<n>
@tab Testpoint
@item
M<n>
@tab Motor
@item
D<n>
@tab Diode
@item
Q<n>
@tab Transistor
@item
U<n>
@tab IC
@item
X<n>
@tab Crystal
@end multitable


@node slot attribute, net attribute, refdes attribute, Symbol and Schematic Attributes
@subsection slot attribute

This attribute is used to specify a slot for a slotted component.  It
should be attached to an instantiated component.  This attribute can
also be on the inside of a symbol (it will be promoted, i.e. attached
to the outside of the symbol, if it is visible) to provide a default
slot.


@node net attribute, value attribute, slot attribute, Symbol and Schematic Attributes
@subsection net attribute

The @attr{net=} attribute is used to create power/ground and arbitrary
nets.  When this attribute is inside a symbol, it is used to create
nets.  When this attribute is attached to an instantiated component
(in a schematic), then the @attr{net=} can also be used to create new
nets and can used to override existing nets.
@xref{net= attribute mini-HOWTO} for more info.


@node value attribute, symversion attribute, net attribute, Symbol and Schematic Attributes
@subsection value attribute

Used mainly in the SPICE backend netlister to specify the value of the
various elements.  No translation is done on this, and it is placed as
is into the netlist.

@emph{Examples:}
@example
value=1K
value=10V
@end example

@node symversion attribute, dist-license attribute, value attribute, Symbol and Schematic Attributes
@subsection symversion attribute

The @attr{symversion=} attribute is used to version the contents of
symbols.  Because symbols are, by default, referenced from the
schematic and not embedded within it, problems can occur in a
schematic using a particular symbol if that symbol file is modified.
For instance, if pins are moved in the symbol, the schematic net lines
will no longer connect to the correct pins.  The @attr{symversion=}
attribute allows tracking such breaking changes to symbols and
notifying the user of potential problems when a schematic is loaded.

This attribute is optional, but if present it must take the following
form:

@attr{major.minor}

where major and minor are integers.  The major number is incremented
when a change is made to a symbol that might break an existing
schematic using the prior version of symbol when the new version is
introduced.  The minor number is only incremented when a minor change
is made (a change that cannot break an existing schematic, such as
cosmetic changes while retaining structure such as location of the
pins).

If this attribute is inside a symbol and that symbol is placed onto a
schematic, the @attr{symversion=} attribute will be automatically
``promoted'', causing a copy of the @attr{symversion=M.N} attribute to
be stored on the symbol instance in the schematic itself.  When a
symbol is loaded from disk, the value of the @attr{symversion=} inside
the symbol file (if any) and the symversion value attached to the
symbol instance on the schematic are compared.  If the values differ,
then libgeda will output a warning message (for minor version changes)
or an error message (for major version changes).

This attribute should normally be made invisible when placed inside a
symbol file.  This attribute is always promoted when it is found
inside a symbol during component placement.  Users should not attach
this attribute manually to instantiated symbols in a schematic.

@emph{Examples:}
@example
symversion=1.1
symversion=2.0
@end example

@node dist-license attribute, use-license attribute, symversion attribute, Symbol and Schematic Attributes
@subsection dist-license attribute

The @attr{dist-license} attribute is used to specify the
redistribution license for the symbol or schematic.  It should be the
name of a known license.  Some examples values are: GPL, GPL version 2
only, GPL version 3 only, public domain, Apache version 2, Modified
BSD, X11, etc.



For a list of licenses see:
@url{http://www.gnu.org/philosophy/license-list.html, FSF License
List} and @url{http://www.opensource.org/licenses/category, OSI
License List}


@node use-license attribute,  , dist-license attribute, Symbol and Schematic Attributes
@subsection use-license attribute

The @attr{use-license} attribute is used to specify the license for
how the symbol or schematic can be used by other people in their own
circuits or boards.  Some example values are: unlimited, personal use
only, not for sale, etc.


FIXME put a better list of examples here.


@node Obsolete Attributes, Attribute compatibility, Symbol and Schematic Attributes, Master attribute list
@section Obsolete Attributes


@menu
* uref attribute::
* name attribute::
* label attribute::
* pin# attribute::
* slot# attribute::
* type attribute::
* email attribute::
@end menu

@node uref attribute, name attribute, Obsolete Attributes, Obsolete Attributes
@subsection uref attribute

The @attr{uref=} attribute is obsolete and cannot not be used.  It was
used to provide the same information as @ref{refdes attribute}.


@node name attribute, label attribute, uref attribute, Obsolete Attributes
@subsection name attribute

The @attr{name=} attribute should not be attached or appear in any
symbol.  It is considered ambiguous.  @attr{name=} was never used by
gEDA/gaf.


@node label attribute, pin# attribute, name attribute, Obsolete Attributes
@subsection label attribute

The @attr{label=} attribute is obsolete and cannot be used.  It was
used to give nets names/labels and to label pins.  The replacement
attributes for this are @ref{netname attribute, netname} and
@ref{pinlabel attribute, pinlabel} respectively.


@node pin# attribute, slot# attribute, label attribute, Obsolete Attributes
@subsection pin# attribute

The @attr{pin#=#} attribute is obsolete and cannot be used.  It was
used to provide sequence and number information to pins.  The
replacement attributes for this are @ref{pinseq attribute, pinseq} and
@ref{pinnumber attribute, pinnumber}.


@node slot# attribute, type attribute, pin# attribute, Obsolete Attributes
@subsection slot# attribute

The @attr{slot#=#} attribute is obsolete and cannot be used.  It was
used to provide slotting information to components.  The replacement
attribute for this is @ref{slotdef attribute}.


@node type attribute, email attribute, slot# attribute, Obsolete Attributes
@subsection type attribute

The type= attribute is obsolete and cannot be used.  It was used to
provide type information on pins.  The replacement attribute for this
is @ref{pintype attribute}.


@node email attribute,  , type attribute, Obsolete Attributes
@subsection email attribute

The information in this attribute has been merged with @ref{author
attribute}.

@node Attribute compatibility,  , Obsolete Attributes, Master attribute list
@section Attribute compatibility

Unlike geda-gaf, Lepton EDA supports attributes with empty values
since version @strong{1.9.17}.

Since the fork, several new attributes have been introduced in Lepton.
They may not be supported in the legacy code of geda-gaf.\

@subsection symbol attribute

The attribute @attr{symbol=} changes meaning of symbols in schematic,
that is, the way how @netlist{} treats them. Such symbols will be
processed in a special way, not as ordinary components.

The reason is that @attr{graphical=1} attribute is overloaded and the
netlister has to use various tricks (e.g. in DRC) to make things done.

@subsubsection symbol=nc
@attr{symbol=nc} means that the symbol will be treated as a
@emph{no-connect} symbol.  The netlister won't output its connection
in the full list of schematic connections.  DRC will suppress errors
on connections having only one pin connected to such a symbol. The
attribute is equivalent to the legacy set of attributes as follows:

@example
graphical=1
device=DRC_Directive
value=NoConnection
@end example


Other possible future uses of the @attr{symbol=} attribute are given
below.

@subsubsection symbol=power
@emph{Not implemented yet.}

The attribute could be used to filter out power symbols from schematic
components.

It could replace the @attr{net=} and @attr{graphical=} attributes, as
well as some DRC attributes, to make the DRC logic more strict, and
solve some net renaming issues.

@subsubsection symbol=schematic-port
@emph{Not implemented yet.}

The attribute could be used to mark ports in hierarchical schematics
in order to simplify the netlister logic.
