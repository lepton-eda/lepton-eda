(use-modules (ice-9 receive))

(load-from-path "env.scm")


(define lepton-shell
  (build-filename *abs-top-builddir*
                  "utils"
                  "cli"
                  "scheme"
                  "lepton-shell"))

(putenv (string-append "LEPTON_SHELL" "=" lepton-shell))


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "cli-tmp"))

;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


(define help-string "Usage: lepton-cli [OPTION...] COMMAND [ARGS ...]")

(define run-help-string "Run `lepton-cli --help' for more information.")


(define help-string "Usage: lepton-cli [OPTION...] COMMAND [ARGS ...]")


;;; Test lepton-cli without args.
(test-begin "lepton-cli")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli)
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You must specify a command to run."))
  (test-assert (string-contains <stderr> run-help-string)))

(test-end "lepton-cli")


;;; Test it with --no-rcfiles but without any command.
(test-begin "lepton-cli --no-rcfiles")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "--no-rcfiles")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You must specify a command to run."))
  (test-assert (string-contains <stderr> run-help-string)))

(test-group-with-cleanup "lepton-cli --no-rcfiles export"
  (test-setup)

  ;; That environment variable is set in Makefile.  Unset it
  ;; temporarily to facilitate testing.  Warning: it may create
  ;; unintended consequences if there's something weird in the
  ;; user or system gafrc.
  (unsetenv "LEPTON_INHIBIT_RC_FILES")

  ;; Create gafrc file with known contents.
  (with-output-to-file "gafrc"
    (lambda () (display "(display \"gafrc is loaded\")\n")))

  ;; First, check if the command in gafrc works.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "export")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stdout> "gafrc is loaded")))

  ;; Now, disable loading of RC files.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "--no-rcfiles" "export")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (not (string-contains <stdout> "gafrc is loaded"))))

  ;; Restore the environment variable to not break other tests.
  (putenv "LEPTON_INHIBIT_RC_FILES=yes")

  ;; Clean up.
  (test-teardown))

(test-group-with-cleanup "lepton-cli --no-rcfiles shell"
  (test-setup)

  ;; That environment variable is set in Makefile.  Unset it
  ;; temporarily to facilitate testing.  Warning: it may create
  ;; unintended consequences if there's something weird in the
  ;; user or system gafrc.  The tests can also break if your
  ;; installation is broken because system-gafrc depends on it.
  (unsetenv "LEPTON_INHIBIT_RC_FILES")

  ;; Create gafrc file with known contents.
  (with-output-to-file "gafrc"
    (lambda () (display "(display \"gafrc is loaded\")\n")))

  ;; First, check if the command in gafrc works.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "shell" "-c" "(exit 10)")
    (test-eq 10 <status>)
    (test-assert (string-contains <stdout> "gafrc is loaded")))

  ;; Now, disable loading of RC files.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "--no-rcfiles" "shell" "-c" "(exit 10)")
    (test-eq 10 <status>)
    (test-assert (not (string-contains <stdout> "gafrc is loaded"))))

  ;; Restore the environment variable to not break other tests.
  (putenv "LEPTON_INHIBIT_RC_FILES=yes")

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli --no-rcfiles")


(test-begin "lepton-cli -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> help-string)))

(test-end "lepton-cli -h")


(test-begin "lepton-cli --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> help-string)))

(test-end "lepton-cli --help")


(test-begin "lepton-cli -V")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "-V")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Lepton EDA"))
  (test-assert (string-contains <stdout> "Copyright"))
  (test-assert (string-contains <stdout> "There is NO WARRANTY")))

(test-end "lepton-cli -V")


(test-begin "lepton-cli --version")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "--version")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Lepton EDA"))
  (test-assert (string-contains <stdout> "Copyright"))
  (test-assert (string-contains <stdout> "There is NO WARRANTY")))

(test-end "lepton-cli --version")


(test-begin "lepton-cli wrong command")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "wrong" "command")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "Unrecognised command"))
  (test-assert (string-contains <stderr> run-help-string)))

(test-end "lepton-cli wrong command")
