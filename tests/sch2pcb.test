(use-modules (srfi srfi-64)
             (ice-9 receive))

(load-from-path "env.scm")

;;; sch2pcb should be aware of where the netlister sits.
(setenv "NETLISTER" *netlister*)


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "sch2pcb-tmp"))

(define repo-module-path (build-filename "liblepton" "scheme"))
(define repo-backend-path (build-filename "tools" "netlist" "scheme" "backend"))
;;; Where built modules live.
(define built-module-path (build-filename *abs-top-builddir* repo-module-path))
;;; Where other modules live.
(define source-module-path (build-filename *abs-top-srcdir* repo-module-path))
;;; Where built backends (gsch2pcb) live.
(define built-backend-path (build-filename *abs-top-builddir* repo-backend-path))
;;; Where other backends live.
(define source-backend-path (build-filename *abs-top-srcdir* repo-backend-path))

;;; Now, the netlister needs to know where Scheme modules and
;;; backends are.
(setenv "GUILE_LOAD_PATH"
        (string-join (append (list built-module-path
                                   source-module-path
                                   built-backend-path
                                   source-backend-path)
                             ;; Current GUILE_LOAD_PATH.
                             %load-path)
                     ;; Delimiter.
                     ":"))


;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


(test-begin "sch2pcb-exists")

(test-assert (file-exists? lepton-sch2pcb))

(test-end)


(test-begin "sch2pcb-m4")

;;; When the program is launched without arguments, it outputs the
;;; default m4 path which is used for looking for m4-elements.
(let ((m4-dir "some-m4-dir")
      (PCBDATA (getenv "PCBDATA")))
  (putenv (string-append "PCBDATA=" m4-dir))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> (build-filename m4-dir "m4"))))
  ;; Unset PCBDATA environment variable.
  (unsetenv "PCBDATA"))

(test-end)


(test-begin "sch2pcb")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb)
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


(test-begin "sch2pcb -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


(test-begin "sch2pcb --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

(test-end)


(test-begin "sch2pcb -V")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "-V")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Lepton EDA"))
  (test-assert (string-contains <stdout> "Copyright"))
  (test-assert (string-contains <stdout> "There is NO WARRANTY")))

(test-end)


(test-begin "sch2pcb --version")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "--version")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Lepton EDA"))
  (test-assert (string-contains <stdout> "Copyright"))
  (test-assert (string-contains <stdout> "There is NO WARRANTY")))

(test-end)


(test-begin "sch2pcb wrong options")

(test-expect-fail 2)

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "--unexisting-option")
  (test-eq EXIT_FAILURE <status>))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-sch2pcb "-broken-option")
  (test-eq EXIT_FAILURE <status>))

(test-end)

(define change-attrib-prog
  '((use-modules (srfi srfi-1)
                 (srfi srfi-26)
                 (lepton attrib)
                 (lepton object)
                 (lepton page))

    (define (get-attrib object attr-name)
      (define (required-attrib? a)
        (and (string= (attrib-name a) attr-name)
             a))

      (let ((ls (filter required-attrib? (object-attribs object))))
        (and (not (null? ls))
             (car ls))))

    (define (has-refdes? c refdes)
      (let ((object-refdes (get-attrib c "refdes")))
        (and object-refdes
             (string= (attrib-value object-refdes) refdes)
             c)))

    (define (object-with-refdes page refdes)
      (let ((ls (filter-map (cut has-refdes? <> refdes)
                            (filter component? (page-contents page)))))
        (and (not (null? ls))
             (car ls))))

    (define (save-page page filename)
      (with-output-to-file filename
        (lambda () (display (page->string page)))))

    (define (remove-attrib! filename refdes attr-name)
      (let* ((page (file->page filename))
             (object (object-with-refdes page refdes))
             (attrib (get-attrib object attr-name)))
        (detach-attribs! object attrib)
        (page-remove! page attrib)
        (save-page page (string-append filename ".new"))))

    (define (replace-attrib! filename refdes attr-name value)
      (let* ((page (file->page filename))
             (object (object-with-refdes page refdes))
             (attrib (get-attrib object attr-name)))
        (set-attrib-value! attrib "RXXX")
        (save-page page (string-append filename ".new"))))))


;;; Test directory in the repository.
(define tests/
  (build-filename *abs-top-srcdir* "tools" "sch2pcb" "tests"))

;;; First part of multi-page schematic.
(define one.sch "one.sch")
(define tests/one.sch (build-filename tests/ one.sch))

;;; Second part of multi-page schematic.
(define two.sch "two.sch")
(define tests/two.sch (build-filename tests/ two.sch))

(define one.pcb "one.pcb")
(define one.cmd "one.cmd")
(define one.net "one.net")
(define tests/one.pcb (build-filename tests/ one.pcb))
(define tests/one.cmd (build-filename tests/ one.cmd))
(define tests/one.net (build-filename tests/ one.net))
(define m4-pcbdir (build-filename tests/ "m4-elements"))

(define gafrc "gafrc")
(define tests/gafrc (build-filename tests/ gafrc))

(define %symbols
  '("2N3904-1.sym"
    "BNC-1.sym"
    "dual-opamp-1.sym"
    "gnd-1.sym"
    "input-2.sym"
    "output-2.sym"
    "resistor-2.sym"
    "vcc-1.sym"
    "vee-1.sym"))

;;; Prepare test directory with necessary schematic files.
(define (prepare-test-directory)
  (test-setup)
  (mkdir "sym")
  (copy-file tests/one.sch one.sch)
  (copy-file tests/two.sch two.sch)
  (copy-file tests/gafrc gafrc)
  (for-each
   (lambda (symbol-name)
     (copy-file (build-filename tests/ "sym" symbol-name)
                (build-filename "sym" symbol-name)))
   %symbols))


(test-begin "sch2pcb -v")

(test-group-with-cleanup "sch2pcb -v"
  (prepare-test-directory)
  (let ((verbose-output "Processing PCBLIBPATH")
        (double-verbose-output "Adding directory to file element directory list"))
    ;; Verbose level is 1.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> verbose-output))
      (test-assert (not (string-contains <stdout> double-verbose-output))))

    ;; Verbose level is >1.
    (with-output-to-file "project"
      (lambda () (display "elements-dir project")))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" "-v" "project" one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> verbose-output))
      (test-assert (string-contains <stdout> double-verbose-output))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --verbose")

(test-group-with-cleanup "sch2pcb --verbose"
  (prepare-test-directory)
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--verbose" one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Processing PCBLIBPATH"))
    (test-assert (string-contains <stdout> "pcblib-newlib")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb-schematics")
(test-group-with-cleanup "sch2pcb-schematics"
  (prepare-test-directory)

  ;; No project file, no PCB elements, just schematic.
  ;; lepton-sch2pcb exits with status 0.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "No elements found, so nothing to do."))
    (test-assert (file-exists? "one.cmd"))
    (test-assert (file-exists? "one.net"))
    ;; one.pcb is missing at this point.
    (test-assert (not (file-exists? "one.pcb"))))

  (test-assert (file-exists? m4-pcbdir))

  ;; Produce one.pcb, one.cmd, and one.net.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  ;; Check that all necessary files exist.
  (test-assert (file-exists? tests/one.pcb))
  (test-assert (file-exists? tests/one.cmd))
  (test-assert (file-exists? tests/one.net))
  ;; Check that new files have been created.
  (test-assert (file-exists? one.pcb))
  (test-assert (file-exists? one.cmd))
  (test-assert (file-exists? one.net))
  ;; Check that there is no difference with new and "golden"
  ;; files.
  (test-run-success "diff" one.pcb tests/one.pcb)
  (test-run-success "diff" one.cmd tests/one.cmd)
  (test-run-success "diff" one.net tests/one.net)

  ;; lepton-shell will be needed for the next test.
  (test-assert (file-exists? lepton-shell))
  (with-output-to-file "script.scm"
    (lambda ()
      (for-each write change-attrib-prog)
      (write '(remove-attrib! "one.sch" "R101" "value"))))
  (test-assert (file-exists? "script.scm"))
  (test-run-success lepton-shell "-s" "script.scm")
  (delete-file one.sch)
  (rename-file "one.sch.new" one.sch)
  (test-run-success lepton-sch2pcb one.sch two.sch)
  (test-run-success "diff" one.pcb (string-append tests/one.pcb ".remove-R101-value"))

  ;; Check that the second run with the same arguments does
  ;; not trigger creating one.new.pcb.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "No elements to add so not creating one.new.pcb")))

  ;; Now, remove one.pcb and try to create the file in two stages.
  (delete-file one.pcb)
  ;; Use one schematic file to create an initial pcb file.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "0 file elements and 4 m4 elements added to one.pcb.")))
  ;; The second pass creates one.new.pcb.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "0 file elements and 3 m4 elements added to one.new.pcb.")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --fix-elements")

(test-group-with-cleanup "sch2pcb --fix-elements"
  (prepare-test-directory)

  (test-run-success lepton-sch2pcb one.sch)
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--fix-elements" one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "Could not find any elements to fix.")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --gnetlist-arg")

(test-group-with-cleanup "sch2pcb --gnetlist-arg"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--gnetlist-arg" "=" two.sch)
                      "-v"
                      one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton-netlist -g pcbpins -o one.cmd two.sch one.sch"))
    (test-assert (string-contains <stdout> "lepton-netlist -g PCB -o one.net two.sch one.sch"))
    (test-assert (string-contains <stdout> "lepton-netlist -g gsch2pcb -o one.pcb -m gnet-gsch2pcb-tmp.scm two.sch one.sch")))

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--gnetlist-arg" "=" "-x")
                      two.sch
                      "-v"
                      one.sch)
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stdout> "lepton-netlist -g pcbpins -o two.cmd -x two.sch one.sch"))
    (test-assert (string-contains <stderr> "lepton-netlist: no such option: -x")))
  (test-teardown))

(test-end)


(test-begin "sch2pcb --keep-unfound --remove-unfound")

(test-group-with-cleanup "sch2pcb --keep-unfound --remove-unfound"
  (prepare-test-directory)

  ;; First, just make an initial .pcb file.
  (test-run-success lepton-sch2pcb one.sch two.sch)

  (test-assert (file-exists? lepton-shell))
  (with-output-to-file "script.scm"
    (lambda ()
      (for-each write change-attrib-prog)
      (write '(replace-attrib! "one.sch" "R101" "value" "RXXX"))))
  (test-assert (file-exists? "script.scm"))
  (test-run-success lepton-shell "-s" "script.scm")
  (delete-file one.sch)
  (rename-file "one.sch.new" one.sch)

  ;; Check, if the error message is missing with --keep-unfound.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--keep-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (not (string-contains <stderr> "will not be in the layout"))))

  ;; Check, if the error message is present with --remove-unfound.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--remove-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "will not be in the layout")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb -k -r")

(test-group-with-cleanup "sch2pcb -k -r"
  (prepare-test-directory)

  ;; First, just make an initial .pcb file.
  (test-run-success lepton-sch2pcb one.sch two.sch)

  (test-assert (file-exists? lepton-shell))
  (with-output-to-file "script.scm"
    (lambda ()
      (for-each write change-attrib-prog)
      (write '(replace-attrib! "one.sch" "R101" "value" "RXXX"))))
  (test-assert (file-exists? "script.scm"))
  (test-run-success lepton-shell "-s" "script.scm")
  (delete-file one.sch)
  (rename-file "one.sch.new" one.sch)

  ;; Check, if the error message is missing with --keep-unfound.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-k" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (not (string-contains <stderr> "will not be in the layout"))))

  ;; Check, if the error message is present with --remove-unfound.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-r" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "will not be in the layout")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --quiet")

(test-group-with-cleanup "sch2pcb --quiet"
  (prepare-test-directory)

  ;; In order to simulate adding elements, use one schematic file
  ;; to make an initial .pcb file.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Now, check that the output contains info on next steps.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Next steps")))

  ;; OK, now remove the .pcb file created and make it once again
  ;; from one file.
  (delete-file one.pcb)
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Check, if no next steps advertised when --quiet is specified.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "--quiet"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (not (string-contains <stdout> "Next steps"))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb -q")

(test-group-with-cleanup "sch2pcb -q"
  (prepare-test-directory)

  ;; In order to simulate adding elements, use one schematic file
  ;; to make an initial .pcb file.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Now, check that the output contains info on next steps.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Next steps")))

  ;; OK, now remove the .pcb file created and make it once again
  ;; from one file.
  (delete-file one.pcb)
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Check, if no next steps advertised when -q is specified.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-q"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (not (string-contains <stdout> "Next steps"))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --preserve")
(test-group-with-cleanup "sch2pcb --preserve"
  (prepare-test-directory)

  ;; Produce an initial pcb file.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch two.sch)
  (test-assert (file-exists? one.pcb))
  (test-run-success "diff" one.pcb tests/one.pcb)

  ;; Now, elements in the one.pcb should be preserved.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "--preserve"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "elements not in the schematic preserved")))
  ;; Pcb file should not have been changed.
  (test-run-success "diff" one.pcb tests/one.pcb)

  ;; This is just to check that without --preserve the output .pcb
  ;; file really changes.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Pcb file should have been changed.
  (test-run-failure "diff" one.pcb tests/one.pcb)

  (test-teardown))

(test-end)


(test-begin "sch2pcb -p")
(test-group-with-cleanup "sch2pcb -p"
  (prepare-test-directory)

  ;; Produce an initial pcb file.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch two.sch)
  (test-assert (file-exists? one.pcb))
  (test-run-success "diff" one.pcb tests/one.pcb)

  ;; Now, elements in the one.pcb should be preserved.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-p"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "elements not in the schematic preserved")))
  ;; Pcb file should not have been changed.
  (test-run-success "diff" one.pcb tests/one.pcb)

  ;; This is just to check that without -p the output .pcb
  ;; file really changes.
  (test-run-success lepton-sch2pcb
                    (string-append "--m4-pcbdir" "=" m4-pcbdir)
                    one.sch)
  ;; Pcb file should have been changed.
  (test-run-failure "diff" one.pcb tests/one.pcb)

  (test-teardown))

(test-end)


(test-begin "sch2pcb --use-files")
(test-group-with-cleanup "sch2pcb --use-files"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "--verbose"
                      "--use-files"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "trying to replace with a file element")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb -f")
(test-group-with-cleanup "sch2pcb -f"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "--verbose"
                      "-f"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "trying to replace with a file element")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --skip-m4")
(test-group-with-cleanup "sch2pcb --skip-m4"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      "--skip-m4"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "(define gsch2pcb:use-m4 #f)"))
    (test-assert (string-contains <stdout> "No elements found, so nothing to do.")))

  ;; Without the option --skip-m4 everything should work OK.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; By default, gsch2pcb:use-m4 is #t.
    (test-assert (string-contains <stdout> "(define gsch2pcb:use-m4 #t)"))
    (test-assert (string-contains <stdout> "Done processing.")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb -s")
(test-group-with-cleanup "sch2pcb -s"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-s"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "No elements found, so nothing to do.")))

  ;; Without the option -s everything should work OK.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --elements-dir")
(test-group-with-cleanup "sch2pcb --elements-dir"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v" "-v"
                      (string-append "--elements-dir" "=" "some-dir")
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Adding directory to file element directory list: \"some-dir\"")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb -d")
(test-group-with-cleanup "sch2pcb -d"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v" "-v"
                      "-d" "some-dir"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Adding directory to file element directory list: \"some-dir\"")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --output-name")
(test-group-with-cleanup "sch2pcb --output-name"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--output-name" "=" "OUT")
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  ;; Check that new files have been created.
  (test-assert (file-exists? "OUT.pcb"))
  (test-assert (file-exists? "OUT.cmd"))
  (test-assert (file-exists? "OUT.net"))
  ;; Check that there is no difference with new and "golden"
  ;; files.
  (test-run-success "diff" "OUT.pcb" tests/one.pcb)
  (test-run-success "diff" "OUT.cmd" tests/one.cmd)
  (test-run-success "diff" "OUT.net" tests/one.net)

  (test-teardown))

(test-end)


(test-begin "sch2pcb -o")
(test-group-with-cleanup "sch2pcb -o"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-o" "OUT"
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  ;; Check that new files have been created.
  (test-assert (file-exists? "OUT.pcb"))
  (test-assert (file-exists? "OUT.cmd"))
  (test-assert (file-exists? "OUT.net"))
  ;; Check that there is no difference with new and "golden"
  ;; files.
  (test-run-success "diff" "OUT.pcb" tests/one.pcb)
  (test-run-success "diff" "OUT.cmd" tests/one.cmd)
  (test-run-success "diff" "OUT.net" tests/one.net)

  (test-teardown))

(test-end)


(test-begin "sch2pcb --gnetlist")
(test-group-with-cleanup "sch2pcb --gnetlist"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--gnetlist" "=" "geda")
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  ;; Check that new files have been created.
  (test-assert (file-exists? "one.pcb"))
  (test-assert (file-exists? "one.cmd"))
  (test-assert (file-exists? "one.net"))
  (test-assert (file-exists? "one.geda"))

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--gnetlist" "=" "\"geda -o x.geda\"")
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "Done processing.")))

  (test-assert (file-exists? "x.geda"))

  ;; Test run with unknown backend.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch
                      (string-append "--gnetlist" "=" "unknown-backend"))

    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "Failed to run netlister")))

  (test-teardown))

(test-end)


(define (prepare-missing-footprint)
  (test-setup)

  (copy-file tests/gafrc gafrc)
  (mkdir "sym")
  (copy-file (build-filename tests/ "sym" "resistor-2.sym")
             (build-filename "sym" "resistor-2.sym"))
  (copy-file (build-filename tests/ "missing-footprint.sch")
             "missing-footprint.sch"))

(test-begin "sch2pcb --empty-footprint")
(test-group-with-cleanup "sch2pcb --empty-footprint"
  (prepare-missing-footprint)

  (test-assert (file-exists? "missing-footprint.sch"))

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "--verbose"
                      (string-append "--empty-footprint" "=" "missing")
                      "missing-footprint.sch")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "WARNING: R1 has a footprint attribute \"none\" so won't be in the layout."))
    (test-assert (string-contains <stdout> "R2: has the empty footprint attribute \"missing\" so won't be in the layout.")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --backend-cmd")
(test-group-with-cleanup "sch2pcb --backend-cmd"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      (string-append "--backend-cmd" "=" "geda")
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton-netlist -g geda -o one.cmd one.sch two.sch")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --backend-net")
(test-group-with-cleanup "sch2pcb --backend-net"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      (string-append "--backend-net" "=" "geda")
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton-netlist -g geda -o one.net one.sch two.sch")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --backend-pcb")
(test-group-with-cleanup "sch2pcb --backend-pcb"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      (string-append "--backend-pcb" "=" "geda")
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton-netlist -g geda -o one.pcb -m gnet-gsch2pcb-tmp.scm one.sch two.sch")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --m4-file")

(test-group-with-cleanup "sch2pcb --m4-file"
  (prepare-test-directory)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      "-v"
                      (string-append "--m4-file" "=" "m4.inc")
                      one.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "define gsch2pcb:m4-files"))
    (test-assert (string-contains <stdout> "m4.inc")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb default m4 files")

(test-group-with-cleanup "sch2pcb default m4 files"
  (prepare-test-directory)

  ;; Test that default "pcb.inc" files are included in the output
  ;; only if they exists.

  (let ((HOME (getenv "HOME"))
        (homedir (build-filename *testdir* "home" "user")))
    ;; Make necessary directories in the current work tree.
    (system* "mkdir" "-p" (build-filename homedir ".pcb"))
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))

    ;; First test with absent "pcb.inc".
    (test-assert (not (file-exists? "pcb.inc")))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb
                        "-v"
                        one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (not (string-contains <stdout> "define gsch2pcb:m4-files")))
      (test-assert (not (string-contains <stdout> "pcb.inc"))))

    ;; Now create "pcb.inc" and test once again.
    (touch "pcb.inc")
    (test-assert (file-exists? "pcb.inc"))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb
                        "-v"
                        one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "define gsch2pcb:m4-files"))
      (test-assert (string-contains <stdout> "pcb.inc")))

    ;; The same tests for "pcb.inc" in "~/.pcb/".

    ;; Delete "pcb.inc" as otherwise it will conflict with the
    ;; next tests.
    (delete-file "pcb.inc")

    ;; First test with absent "pcb.inc".
    (test-assert (not (file-exists? (build-filename homedir ".pcb" "pcb.inc"))))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb
                        "-v"
                        one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (not (string-contains <stdout> "define gsch2pcb:m4-files")))
      (test-assert (not (string-contains <stdout> "/home/user/.pcb/pcb.inc"))))

    ;; Now create "pcb.inc" and test once again.
    (touch (build-filename homedir ".pcb" "pcb.inc"))
    (test-assert (file-exists? (build-filename homedir ".pcb" "pcb.inc")))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb
                        "-v"
                        one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "define gsch2pcb:m4-files"))
      (test-assert (string-contains <stdout> "/home/user/.pcb/pcb.inc")))

    ;; Restore environment variables.
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb backup filenames")

(test-group-with-cleanup "sch2pcb backup filenames"
  (prepare-test-directory)

  (let ((mock-pcb (string-append tests/one.pcb ".remove-R101-value")))
    (copy-file mock-pcb one.pcb)
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb one.sch two.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak.")))
    (copy-file mock-pcb one.pcb)
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb one.sch two.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak0.")))
    (copy-file mock-pcb one.pcb)
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb one.sch two.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak1."))))

  (test-teardown))

(test-end)


(define empty-project-contents
  "# Comment starting with a hash symbol.
/ Comment starting with a slash.
; Comment starting with a semicolon.
\t ;  Line starting with a tab symbol
  \t\t # Line starting with spaces and tabs.
# The next four lines consist only of whitespaces.

  \t
\t
\t\t\t\t
#schematics one.sch two.sch
/schematics one.sch two.sch
;schematics one.sch two.sch
   #schematics one.sch two.sch

;; A couple of empty lines.

")

(test-begin "sch2pcb empty project file")

(test-group-with-cleanup "sch2pcb empty project file"
  (prepare-test-directory)

  (with-output-to-file "sch2pcb-project"
    (lambda () (display empty-project-contents)))

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "sch2pcb-project")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "usage: lepton-sch2pcb")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key schematics")

(test-group-with-cleanup "sch2pcb project key schematics"
  (prepare-test-directory)

  (let ((project-contents
         "schematics one.sch two.sch"))

    (with-output-to-file "sch2pcb-project"
      (lambda () (display project-contents)))

    ;; No m4 elements directory is specified.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "sch2pcb-project")
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "No elements found, so nothing to do.")))

    ;; m4 elements directory is specified.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb
                        "sch2pcb-project"
                        (string-append "--m4-pcbdir" "=" m4-pcbdir))
      (test-eq EXIT_SUCCESS <status>)
      (test-assert
          (string-contains <stdout>
                           "0 file elements and 7 m4 elements added to one.pcb."))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key schematics advanced")

(test-group-with-cleanup "sch2pcb project key schematics advanced"
  (test-setup)

  ;; Test wrong values of the 'schematics' key.
  (string->file "schematics \" " "double-quote")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "double-quote")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  (string->file "schematics \" contents " "double-quote-with-contents")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "double-quote-with-contents")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  (string->file "schematics ' " "single-quote")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "single-quote")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  (string->file "schematics ' contents " "single-quote-with-contents")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "single-quote-with-contents")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  ;; Test empty 'schematics' key value.
  (string->file "schematics" "empty")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "empty")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  ;; Test quoted names with or without special symbols.

  ;; File contents to test
  ;; ------------------8<--------------------
;;   "schematics a\ b.sch

  ;; ------------------>8--------------------


  (string->file (string-join
                 '("schematics"
                   "'a.sch'"
                   "  \"b.sch\""
                   " 'c.sch d.sch' "
                   " \"e.sch f.sch\" "))
                ;; File name.
                "special")
  ;; ;; Make sure files specified in the 'schematic' option exist.
  (touch "a.sch")
  (touch "b.sch")
  (touch "c.sch d.sch")
  (touch "e.sch f.sch")

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "special")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "'a.sch'"))
    (test-assert (string-contains <stdout> "\"b.sch\""))
    (test-assert (string-contains <stdout> "'c.sch d.sch'"))
    (test-assert (string-contains <stdout> "\"e.sch f.sch\"")))

  (string->file "schematics \"\\\".sch\"" "double-quote-within-double-quotes")
  (touch "\".sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "double-quote-within-double-quotes")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "\"\\\".sch\"")))

  (string->file "schematics ';.sch'" "semicolon-within-quotes")
  (touch ";.sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "semicolon-within-quotes")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "';.sch'")))

  ;; This file name has issues with quoting in shell.
  (string->file "schematics '\\'.sch'" "quote-within-quotes")
  (touch "'.sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "quote-within-quotes")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stderr> "invalid `schematics' option")))

  ;; Files within other directories.
  (string->file "schematics \"dir/x.sch\" " "slash")
  (mkdir "dir")
  (touch "dir/x.sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "slash")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "\"dir/x.sch\"")))

  ;; Filenames with backslashes.  May be considered as filenames
  ;; in other directories in some OSes.
  (string->file "schematics \"\\.sch\" " "backslash")
  (touch "\\.sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "backslash")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "\"\\.sch\"")))

  ;; Escaped spaces.
  (string->file "schematics x\\ .sch" "escaped-space")
  (touch "x .sch")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "-v" "escaped-space")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "x\\ .sch")))

  ;; Filenames with newlines are not supported.
  (touch "x\ny.sch")
  (string->file "schematics \"x\\ny.sch\"" "newline")
  (test-expect-fail 1)
  (test-run-success lepton-sch2pcb "-v" "newline")

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key m4-pcbdir")

(test-group-with-cleanup "sch2pcb project key m4-pcbdir"
  (prepare-test-directory)

  (let ((project-contents
         (string-append "m4-pcbdir" " " m4-pcbdir)))

    (with-output-to-file "sch2pcb-project"
      (lambda () (display project-contents)))

    ;; Test without schematics.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "sch2pcb-project")
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "usage: lepton-sch2pcb"))
      (test-assert (not (file-exists? one.pcb))))

    ;; Test with schematics.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "sch2pcb-project" one.sch two.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert
          (string-contains <stdout>
                           "0 file elements and 7 m4 elements added to one.pcb."))
      (test-assert (file-exists? one.pcb))
      (test-run-success "diff" one.pcb tests/one.pcb)))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --keep-unfound and --remove-unfound with missing elements")

(test-group-with-cleanup "sch2pcb --keep-unfound and --remove-unfound with missing elements"
  (prepare-test-directory)

  (test-assert (not (file-exists? one.pcb)))

  ;; Check simple command when all elements are missing.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; one.pcb is still missing.
    (test-assert (not (file-exists? one.pcb)))
    ;; No backup.
    (test-assert (not (file-exists? "one.pcb.bak")))
    (test-assert
        (string-contains <stdout> "No elements found, so nothing to do.")))

  ;; Same as above but with --remove-unfound.  Nothing should
  ;; change since the default value of the option is true.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--remove-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; one.cmd and one.net were created.
    (test-assert (file-exists? "one.cmd"))
    (test-assert (file-exists? "one.net"))
    ;; one.pcb is still missing.
    (test-assert (not (file-exists? one.pcb)))
    ;; No backup.
    (test-assert (not (file-exists? "one.pcb.bak")))
    (test-assert (string-contains <stdout> "No elements found, so nothing to do.")))

  ;; Now, test with --keep-unfound.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--keep-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; one.pcb was created.
    (test-assert (file-exists? one.pcb))
    ;; No backup.
    (test-assert (not (file-exists? "one.pcb.bak")))
    ;; No one.new.pcb.
    (test-assert (not (file-exists? "one.new.pcb")))
    ;; Program reports not found or omitted elements.
    (test-assert (string-contains <stdout> "7 not found elements added to one.pcb."))
    ;; Test one.pcb contents.
    (test-grep-file-success "PKG_CONNECTOR(CONNECTOR-2-1,CONN201,unknown,2,1)" one.pcb)
    (test-grep-file-success "PKG_TO92(TO92,Q201,2N3904)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R101,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R102,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R103,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R201,10K)" one.pcb)
    (test-grep-file-success "PKG_DIL(DIL-8-300,U101,TL072,8,300)" one.pcb))

  ;; Replace one.sch with its modified version.
  (delete-file one.sch)
  ;; The same as one.sch but with "footprint=unknown" for R101.
  (copy-file (build-filename tests/ "one.sch.R101.footprint.unknown")
             one.sch)

  ;; Test with --keep-unfound after component change.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--keep-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; one.pcb had been created before.
    (test-assert (file-exists? one.pcb))
    ;; No backup.
    (test-assert (not (file-exists? "one.pcb.bak")))
    ;; one.new.pcb has been created.
    (test-assert (file-exists? "one.new.pcb"))
    ;; Program reports not found or omitted elements.
    (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
    (test-assert (string-contains <stdout> "6 not found elements added to one.new.pcb."))
    (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
    ;; Test one.pcb contents.
    (test-grep-file-success "PKG_CONNECTOR(CONNECTOR-2-1,CONN201,unknown,2,1)" one.pcb)
    (test-grep-file-success "PKG_TO92(TO92,Q201,2N3904)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R101,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R102,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R103,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R201,10K)" one.pcb)
    (test-grep-file-success "PKG_DIL(DIL-8-300,U101,TL072,8,300)" one.pcb))

  ;; Test with --remove-unfound once again.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb "--remove-unfound" one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; BUG: Backup was not created while reported it was created.
    (test-assert (not (file-exists? "one.pcb.bak")))
    ;; one.new.pcb has been renamed to one.pcb and thus removed.
    (test-assert (not (file-exists? "one.new.pcb")))
    ;; Program reports misc things.
    (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
    (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak."))
    (test-assert (string-contains <stdout> "No elements to add so not creating one.new.pcb"))
    (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
    (test-assert (string-contains <stdout> "6 elements could not be found."))
    ;; Test one.pcb contents.  onew.new.pcb has been renamed to one.pcb.  Strange.
    (test-grep-file-success "PKG_CONNECTOR(CONNECTOR-2-1,CONN201,unknown,2,1)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R101,10K)" one.pcb)
    (test-grep-file-success "PKG_TO92(TO92,Q201,2N3904)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R102,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R103,10K)" one.pcb)
    (test-grep-file-success "PKG_R025(R025,R201,10K)" one.pcb)
    (test-grep-file-success "PKG_DIL(DIL-8-300,U101,TL072,8,300)" one.pcb))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --keep-unfound and --remove-unfound with elements")

(test-group-with-cleanup "sch2pcb --keep-unfound and --remove-unfound with elements"
  (prepare-test-directory)

  (test-assert (not (file-exists? one.pcb)))

  ;; Create initial PCB file.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (file-exists? one.pcb))
    (test-run-success "diff" one.pcb tests/one.pcb)
    ;; No backup.
    (test-assert (not (file-exists? "one.pcb.bak")))
    (test-assert (string-contains <stdout> "0 file elements and 7 m4 elements added to one.pcb.")))

  ;; Replace one.sch with its modified version.
  (delete-file one.sch)
  ;; The same as one.sch but with "footprint=unknown" for R101.
  (copy-file (build-filename tests/ "one.sch.R101.footprint.unknown")
             one.sch)

  ;; Test with --keep-unfound after component change.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      "--keep-unfound"
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (file-exists? one.pcb))
    (test-assert (file-exists? "one.pcb.bak"))
    ;; No one.new.pcb.
    (test-assert (not (file-exists? "one.new.pcb")))
    ;; Program reports not found or omitted elements.
    (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
    (test-assert (string-contains <stdout> "1 elements deleted from one.pcb."))
    (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
    ;; Test one.pcb contents.
    (test-expect-fail 1)
    ;; BUG: --keep-unfound does not preserve elements.  It does
    ;; nothing but reporting something to stderr.
    (test-grep-file-success "R101" one.pcb)
    (test-grep-file-success "CONN201" one.pcb)
    (test-grep-file-success "Q201" one.pcb)
    (test-grep-file-success "R102" one.pcb)
    (test-grep-file-success "R103" one.pcb)
    (test-grep-file-success "R201" one.pcb)
    (test-grep-file-success "U101" one.pcb))

  ;; Test with --remove-unfound.

  ;; First, restore one.pcb as there is a bug in processing
  ;; --keep-unfound, see above.
  (delete-file one.pcb)
  (copy-file tests/one.pcb one.pcb)
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-sch2pcb
                      (string-append "--m4-pcbdir" "=" m4-pcbdir)
                      "--remove-unfound"
                      one.sch two.sch)
    (test-eq EXIT_SUCCESS <status>)
    ;; Test that backup file is intact.
    (test-assert (file-exists? "one.pcb.bak"))
    (test-assert (file-exists? "one.pcb.bak0"))
    (test-run-success "diff" "one.pcb.bak" tests/one.pcb)
    ;; one.new.pcb has been renamed to one.pcb and thus removed.
    (test-assert (not (file-exists? "one.new.pcb")))
    ;; Program reports misc things.
    (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
    (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak0."))
    (test-assert (string-contains <stdout> "1 elements deleted from one.pcb."))
    (test-assert (string-contains <stdout> "No elements to add so not creating one.new.pcb"))
    (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
    ;; Test one.pcb contents.  Only R101 is missing.
    (test-grep-file-failure "R101" one.pcb)
    (test-grep-file-success "CONN201" one.pcb)
    (test-grep-file-success "Q201" one.pcb)
    (test-grep-file-success "R102" one.pcb)
    (test-grep-file-success "R103" one.pcb)
    (test-grep-file-success "R201" one.pcb)
    (test-grep-file-success "U101" one.pcb))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key keep-unfound")

(test-group-with-cleanup "sch2pcb project key keep-unfound"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "keep-unfound
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (test-assert (not (file-exists? one.pcb)))

    ;; Create initial PCB file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (file-exists? one.pcb))
      (test-run-success "diff" one.pcb tests/one.pcb)
      (test-assert (string-contains <stdout> "0 file elements and 7 m4 elements added to one.pcb.")))

    ;; Replace one.sch with its modified version.
    (delete-file one.sch)
    ;; The same as one.sch but with "footprint=unknown" for R101.
    (copy-file (build-filename tests/ "one.sch.R101.footprint.unknown")
               one.sch)

    ;; Test after component change.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (file-exists? one.pcb))
      (test-assert (file-exists? "one.pcb.bak"))
      ;; Program reports not found or omitted elements.
      (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
      (test-assert (string-contains <stdout> "1 elements deleted from one.pcb."))
      (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
      ;; Test one.pcb contents.
      (test-expect-fail 1)
      ;; BUG: --keep-unfound does not preserve elements.  It does
      ;; nothing but reporting something to stderr.
      (test-grep-file-success "R101" one.pcb)
      (test-grep-file-success "CONN201" one.pcb)
      (test-grep-file-success "Q201" one.pcb)
      (test-grep-file-success "R102" one.pcb)
      (test-grep-file-success "R103" one.pcb)
      (test-grep-file-success "R201" one.pcb)
      (test-grep-file-success "U101" one.pcb)))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key remove-unfound")

(test-group-with-cleanup "sch2pcb project key remove-unfound"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "remove-unfound
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (test-assert (not (file-exists? one.pcb)))

    ;; Create initial PCB file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (file-exists? one.pcb))
      (test-run-success "diff" one.pcb tests/one.pcb)
      (test-assert (string-contains <stdout> "0 file elements and 7 m4 elements added to one.pcb.")))

    ;; Replace one.sch with its modified version.
    (delete-file one.sch)
    ;; The same as one.sch but with "footprint=unknown" for R101.
    (copy-file (build-filename tests/ "one.sch.R101.footprint.unknown")
               one.sch)

    ;; Test after component change.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project)
      (test-eq EXIT_SUCCESS <status>)
      ;; Test that backup file is intact.
      (test-assert (file-exists? "one.pcb.bak"))
      (test-run-success "diff" "one.pcb.bak" tests/one.pcb)

      ;; Program reports misc things.
      (test-assert (string-contains <stderr> "WARNING: R101 has no footprint attribute so won't be in the layout."))
      (test-assert (string-contains <stdout> "one.pcb is backed up as one.pcb.bak."))
      (test-assert (string-contains <stdout> "1 elements deleted from one.pcb."))
      (test-assert (string-contains <stdout> "No elements to add so not creating one.new.pcb"))
      (test-assert (string-contains <stdout> "1 components had no footprint attribute and are omitted."))
      ;; Test one.pcb contents.  Only R101 is missing.
      (test-grep-file-failure "R101" one.pcb)
      (test-grep-file-success "CONN201" one.pcb)
      (test-grep-file-success "Q201" one.pcb)
      (test-grep-file-success "R102" one.pcb)
      (test-grep-file-success "R103" one.pcb)
      (test-grep-file-success "R201" one.pcb)
      (test-grep-file-success "U101" one.pcb)))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key quiet")

(test-group-with-cleanup "sch2pcb project key quiet"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "quiet
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    ;; In order to simulate adding elements, use one schematic file
    ;; to make an initial .pcb file.
    (test-run-success lepton-sch2pcb one.sch)
    ;; Check, if no next steps advertised when 'quiet' is specified.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project one.sch two.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (file-exists? one.pcb))
      (test-assert (not (string-contains <stdout> "Next steps")))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key preserve")
(test-group-with-cleanup "sch2pcb project key preserve"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "preserve
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    ;; Produce an initial pcb file.
    (test-run-success lepton-sch2pcb project one.sch two.sch)
    (test-assert (file-exists? one.pcb))
    (test-run-success "diff" one.pcb tests/one.pcb)
    (test-run-success "diff" one.cmd tests/one.cmd)
    (test-run-success "diff" one.net tests/one.net)

    ;; Now, elements in the one.pcb should be preserved.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb project one.sch)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "3 elements not in the schematic preserved in one.pcb.")))
    ;; Pcb file should not have changed.
    (test-run-success "diff" one.pcb tests/one.pcb)
    ;; However .cmd and .net files have changed.
    (test-run-failure "diff" one.cmd tests/one.cmd)
    (test-run-failure "diff" one.net tests/one.net))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key use-files")
(test-group-with-cleanup "sch2pcb project key use-files"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "use-files
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "trying to replace with a file element"))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key skip-m4")
(test-group-with-cleanup "sch2pcb project key skip-m4"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "skip-m4
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    ;; No elements found despite of m4-pcbdir setting.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "(define gsch2pcb:use-m4 #f)"))
      (test-assert (string-contains <stdout> "No elements found, so nothing to do."))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key elements-dir")
(test-group-with-cleanup "sch2pcb project key elements-dir"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "elements-dir pcb-elements
                  schematics one.sch two.sch
                  ")))

    (with-output-to-file project
      (lambda () (display project-contents)))
    (mkdir "pcb-elements")

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "Adding directory to file element directory list: pcb-elements"))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb output-name")
(test-group-with-cleanup "sch2pcb output-name"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "output-name OUT
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (test-run-success lepton-sch2pcb project)

    ;; Check that new files have been created.
    (test-assert (file-exists? "OUT.pcb"))
    (test-assert (file-exists? "OUT.cmd"))
    (test-assert (file-exists? "OUT.net"))
    ;; Check that there is no difference with new and "golden"
    ;; files.
    (test-run-success "diff" "OUT.pcb" tests/one.pcb)
    (test-run-success "diff" "OUT.cmd" tests/one.cmd)
    (test-run-success "diff" "OUT.net" tests/one.net))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project key m4-file")

(test-group-with-cleanup "sch2pcb project key m4-file"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "m4-file m4-1.inc m4-2.inc
                  m4-file m4-3.inc
                  schematics one.sch two.sch")))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "define gsch2pcb:m4-files"))
      (test-assert (string-contains <stdout> "m4-1.inc m4-2.inc m4-3.inc"))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb gnetlist")
(test-group-with-cleanup "sch2pcb gnetlist"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "gnetlist partslist1
                  gnetlist partslist3 -o board.parts
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "lepton-netlist -g partslist1 -o one.partslist1 one.sch two.sch"))
      (test-assert (string-contains <stdout> "lepton-netlist -g partslist3 -o board.parts one.sch two.sch")))
    ;; Check that new files have been created.
    (test-assert (file-exists? "one.partslist1")))

  (test-teardown))

(test-end)


(test-begin "sch2pcb --empty-footprint")
(test-group-with-cleanup "sch2pcb --empty-footprint"
  (prepare-missing-footprint)

  (test-assert (file-exists? "missing-footprint.sch"))

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "empty-footprint none
                  empty-footprint missing
                  schematics missing-footprint.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stderr> "WARNING: R1 has a footprint attribute \"none\" so won't be in the layout."))
      ;; Only the last value of 'empty-footprint' in the project
      ;; file is significant.
      (test-assert (string-contains <stdout> "R2: has the empty footprint attribute \"missing\" so won't be in the layout."))))

  (test-teardown))

(test-end)


(test-begin "sch2pcb project keys backend-cmd, backend-net, backend-pcb")
(test-group-with-cleanup "sch2pcb project key backend-cmd, backend-net, backend-pcb"
  (prepare-test-directory)

  (let ((project "sch2pcb-project")
        (project-contents
         (format #f
                 "backend-cmd partslist1
                  backend-net partslist2
                  backend-pcb partslist3
                  schematics one.sch two.sch
                  m4-pcbdir ~A"
                 m4-pcbdir)))

    (with-output-to-file project
      (lambda () (display project-contents)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-sch2pcb "-v" project)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "lepton-netlist -g partslist1 -o one.cmd one.sch two.sch"))
      (test-assert (string-contains <stdout> "lepton-netlist -g partslist2 -o one.net one.sch two.sch"))
      (test-assert (string-contains <stdout> "lepton-netlist -g partslist3 -o one.pcb -m gnet-gsch2pcb-tmp.scm one.sch two.sch"))))

  (test-teardown))

(test-end)
