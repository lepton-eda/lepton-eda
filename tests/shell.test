(use-modules (ice-9 receive))

(load-from-path "env.scm")


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "shell-tmp"))

;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))


(define (string->file contents filename)
  (with-output-to-file filename
    (lambda () (display contents)))
  filename)

(define (shell-values args . shell-input)
  (let* ((stdout-pipe (pipe))
         (stdout-pipe-inport (car stdout-pipe))
         (stdout-pipe-outport (cdr stdout-pipe))
         (stderr-pipe (pipe))
         (stderr-pipe-inport (car stderr-pipe))
         (stderr-pipe-outport (cdr stderr-pipe))
         (stdin-pipe (pipe))
         (stdin-pipe-inport (car stdin-pipe))
         (stdin-pipe-outport (cdr stdin-pipe))
         (command (cons lepton-cli (cons "shell" args))))
    (format (current-error-port)
            "Test: ~A\nInput: ~A\n  "
            (string-join command)
            (string-join shell-input "\n  "'suffix))
    (for-each (lambda (x) (display x stdin-pipe-outport)) shell-input)
    (close-port stdin-pipe-outport)
    (let ((exit-status
           (status:exit-val
            (with-output-to-port stdout-pipe-outport
              (lambda ()
                (with-error-to-port stderr-pipe-outport
                  (lambda ()
                    (with-input-from-port stdin-pipe-inport
                      (lambda ()
                        (apply system* command))))))))))
      (close-port stdout-pipe-outport)
      (close-port stderr-pipe-outport)
      (let ((out-string (get-string-all stdout-pipe-inport))
            (err-string (get-string-all stderr-pipe-inport)))
        ;; I don't want to close input ports since the pipes
        ;; should be garbage collected after use.
        (format (current-error-port)
                "Status: ~A\nStdout:\n~A\n\nStderr:\n~A\n\n"
                exit-status
                out-string
                err-string)
        (values exit-status out-string err-string)))))

;;; Launch 'lepton-cli shell' without arguments.  The command
;;; takes a 'display' command from its <stdin>, executes it, and
;;; exits.  We test that <stdout> contains the displayed string,
;;; and the command exits with success, i.e. its exit status is
;;; zero.
(test-begin "lepton-cli shell")

(let* ((scheme-code "(display \"LEPTON SHELL\") (exit)"))
  (receive (<status> <stdout> <stderr>)
      (shell-values '() scheme-code)
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "LEPTON SHELL"))))

(test-end "lepton-cli shell")


;;; Test that directory specified by the -L option is added to
;;; Guile %load-path.
(test-begin "lepton-cli shell -L")

(receive (<status> <stdout> <stderr>)
    (shell-values '("-L" "SOMEDIR")
                  "(display (car %load-path)) (exit)")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "SOMEDIR")))

(test-group-with-cleanup "group: lepton-cli shell -L"
  (test-setup)

  (let* ((moduledir (build-filename *testdir* "lepton"))
         (loadfile (build-filename moduledir "filename")))
    (mkdir moduledir)
    (string->file "(define-module (lepton filename))
                   (define-public (myproc) (exit 7))"
                  loadfile)
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell"
                        "-L" *testdir*
                        "-c" "(use-modules (lepton filename)) (myproc)")
      (test-eq 7 <status>)
      (test-equal "" <stdout>)))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell -L")


(test-begin "lepton-cli shell -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage:"))
  (test-assert (string-contains <stdout> "Shell for interactive processing of Lepton EDA data using Scheme.")))

(test-end "lepton-cli shell -h")


(test-begin "lepton-cli shell --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage:"))
  (test-assert (string-contains <stdout> "Shell for interactive processing of Lepton EDA data using Scheme.")))

(test-end "lepton-cli shell --help")


(test-begin "lepton-cli shell --version")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "--version")
  (test-eq EXIT_FAILURE <status>)
  (test-equal "" <stdout>)
  (test-assert (string-contains <stderr> "unrecognized option"))
  (test-assert (string-contains <stderr> "--help' for more information.")))

(test-end "lepton-cli shell --version")


(test-begin "lepton-cli shell -c")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(display 'x)")
  (test-eq EXIT_SUCCESS <status>))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(exit 3)")
  (test-eq 3 <status>))

;;; -h and --help take priority over -c, so the value returned in
;;; two cases below is 0 (success).
(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(exit 3)" "-h")
  (test-eq EXIT_SUCCESS <status>))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(exit 3)" "--help")
  (test-eq EXIT_SUCCESS <status>))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c")
  (test-assert EXIT_FAILURE <status>)
  (test-equal "" <stdout>)
  (test-assert (string-contains <stderr> "require"))
  (test-assert (string-contains <stderr> "argument"))
  (test-assert (string-contains <stderr> "Run `lepton-cli shell --help' for more information.")))

(test-end "lepton-cli shell -c")


(test-begin "lepton-cli shell -s")

(test-group-with-cleanup "group: lepton-cli shell -s"
  (test-setup)

  (let ((filename (string->file "(exit 4)"
                                (build-filename *testdir* "anyfile.scm"))))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" filename)
      (test-eq 4 <status>)))

  ;; Clean up.
  (test-teardown))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-s")
  (test-eq EXIT_FAILURE <status>)
  (test-equal "" <stdout>)
  (test-assert (string-contains <stderr> "require"))
  (test-assert (string-contains <stderr> "argument"))
  (test-assert (string-contains <stderr> "Run `lepton-cli shell --help' for more information.")))

(test-end "lepton-cli shell -s")


(test-begin "lepton-cli shell -c -l -s")

(test-group-with-cleanup "group: lepton-cli shell -c -l -s"
  (test-setup)
  ;; -c, -l, and -s are of the same priority so the first one
  ;; option in the command line will define the result.
  (let ((l-filename (string->file "(exit 2)"
                                  (build-filename *testdir* "l.scm")))
        (s-filename (string->file "(exit 4)"
                                  (build-filename *testdir* "s.scm"))))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" s-filename "-c" "(exit 3)")
      (test-eq 4 <status>))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" s-filename "-l" l-filename)
      (test-eq 4 <status>))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-l" l-filename "-c" "(exit 3)")
      (test-eq 2 <status>))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-l" l-filename "-s" s-filename)
      (test-eq 2 <status>))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-c" "(exit 3)" "-s" s-filename)
      (test-eq 3 <status>))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-c" "(exit 3)" "-l" l-filename)
      (test-eq 3 <status>)))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell -c -l -s")


(test-begin "lepton-cli shell toplevel")

(test-group-with-cleanup "group: lepton-cli shell toplevel"
  (test-setup)

  (let* ((scheme-code "(use-modules (lepton core toplevel)) (display (%current-toplevel))")
         (scheme-code-w-exit (string-append scheme-code "(exit)"))
         (scheme-filename (string->file scheme-code-w-exit
                                        (build-filename *testdir* "file.scm"))))
    (receive (<status> <stdout> <stderr>)
        (shell-values '() scheme-code-w-exit)
      (test-assert (string-contains <stdout> "geda-toplevel")))
    (receive (<status> <stdout> <stderr>)
        (shell-values '("-L" "\"non-existing-dir\"") scheme-code-w-exit)
      (test-assert (string-contains <stdout> "geda-toplevel")))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-l" scheme-filename)
      (test-assert (string-contains <stdout> "geda-toplevel")))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" scheme-filename)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "geda-toplevel")))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-c" scheme-code)
      (test-eq EXIT_SUCCESS <status>)
      (test-assert (string-contains <stdout> "geda-toplevel"))))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell toplevel")


(test-begin "lepton-cli shell -c command")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))")
  (test-equal <stdout> "(\"shell\")"))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))"
                    "a" "-l" "b" "--" "c" "d")
  (test-equal <stdout>
    "(\"shell\" \"a\" \"-l\" \"b\" \"--\" \"c\" \"d\")"))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-L" "dir" "-c" "(write (command-line))"
                    "a" "-s" "b")
  (test-equal <stdout>
    "(\"shell\" \"a\" \"-s\" \"b\")"))

(test-end "lepton-cli shell -c command")


(test-begin "lepton-cli shell -s filename")

(test-group-with-cleanup "group: lepton-cli shell -s filename"
  (test-setup)

  (let ((scheme-filename (string->file "(write (command-line)) (exit 20)"
                                       (build-filename *testdir*
                                                       "filename.scm"))))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" scheme-filename)
      (test-equal 20 <status>)
      (test-equal <stdout> (format #f "(~S)" scheme-filename)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-s" scheme-filename
                        "a" "-l" "b" "--" "c" "d")
      (test-equal 20 <status>)
      (test-equal <stdout>
        (format #f "(~S \"a\" \"-l\" \"b\" \"--\" \"c\" \"d\")" scheme-filename)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-L" "dir" "-s" scheme-filename
                        "a" "-s" "b")
      (test-equal 20 <status>)
      (test-equal <stdout>
        (format #f "(~S \"a\" \"-s\" \"b\")" scheme-filename))))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell -s filename")


(test-begin "lepton-cli shell -- -s filename")

(test-group-with-cleanup "lepton-cli shell -- -s filename"
  (test-setup)

  (let* ((contents "(write (command-line)) (exit 21)")
         (scheme-filename (string->file contents
                                        (build-filename *testdir*
                                                        "filename.scm")))
         (shell-command-output (format #f "(\"shell\" \"-s\" ~S)" scheme-filename)))

    (receive (<status> <stdout> <stderr>)
        (shell-values (list "--" "-s" scheme-filename) contents)
      (test-eq 21 <status>)
      (test-assert (string-contains <stdout> shell-command-output)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "--" "shell" "-s" scheme-filename)
      (test-eq EXIT_FAILURE <status>)
      (test-assert (string-contains <stderr> "ERROR: You must specify a command to run.")))

    ;; This works differently if I use 'guile' instead of
    ;; 'lepton-cli'.  Guile correctly interprets anything after "--"
    ;; as file names and, since file "-s" is missing, enters shell.
    ;; Cli does not, since the first argument must be command
    ;; (e.g. "shell") which is missing in this case, and toplevel
    ;; 'lepton-cli' code is interpreted which does not know the
    ;; command '-s'.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "--" "-s" scheme-filename)
      (test-eq EXIT_FAILURE <status>)
      (test-assert (string-contains <stderr> "ERROR: You must specify a command to run."))))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell -- -s filename")


(test-begin "lepton-cli shell -c args")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))" "arg1" "arg2" "arg3")
  (test-equal <stdout> "(\"shell\" \"arg1\" \"arg2\" \"arg3\")"))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))" "arg1" "arg2" "arg3" "-l" "/tmp/x")
  (test-equal <stdout> "(\"shell\" \"arg1\" \"arg2\" \"arg3\" \"-l\" \"/tmp/x\")"))

(test-end "lepton-cli shell -c args")


(test-begin "lepton-cli shell --")

(receive (<status> <stdout> <stderr>)
    (shell-values '("--")
                  "(write (command-line))"
                  "(exit)")
  (test-assert (string-contains <stdout> "(\"shell\")")))

(receive (<status> <stdout> <stderr>)
    (shell-values '("--" "x" "y" "z")
                  "(write (command-line))"
                  "(exit)")
  (test-assert (string-contains <stdout> "(\"shell\" \"x\" \"y\" \"z\")")))

(test-end "lepton-cli shell --")


(test-begin "lepton-cli shell -c --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-h" "-c" "(display 'anything)")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage:")))

;;; Unlike guile, "lepton-cli shell" outputs help here, too,
;;; because the '-h' option has priority over other options.
(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(display 'anything)" "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage:")))

(test-end "lepton-cli shell -c --help")


(test-begin "lepton-cli shell -c command -- a b c")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))" "--" "a" "b" "c")
  (test-equal <stdout> "(\"shell\" \"--\" \"a\" \"b\" \"c\")"))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "shell" "-c" "(write (command-line))" "-s" "foo.scm" "--" "a" "b" "c")
  (test-equal <stdout> "(\"shell\" \"-s\" \"foo.scm\" \"--\" \"a\" \"b\" \"c\")"))

(test-end "lepton-cli shell -c command -- a b c")


(test-begin "lepton-cli shell file arguments")

(test-group-with-cleanup  "lepton-cli shell file arguments"
  (test-setup)

  (let ((x (build-filename *testdir* "x.scm"))
        (y (build-filename *testdir* "y.scm"))
        ;; Directory.
        (z (build-filename *testdir* "z")))

    ;; No x and y/z file exist.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" x "-c" "(write (command-line)) (exit 100)")
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))

    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" x y)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" x "-s" y)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" x "-l" y)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-l" y x)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> y)))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" x "-L" z)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "shell" "-L" z x)
      (test-eq EXIT_FAILURE <status>)
      (test-equal "" <stdout>)
      (test-assert (string-contains <stderr> "No such file or directory"))
      (test-assert (string-contains <stderr> x)))

    ;; No x file, y/z exists.
    (let ((y (string->file "(write (command-line))" y)))
      (mkdir z)

      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" x y)
        (test-eq EXIT_FAILURE <status>)
        (test-equal "" <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))
      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" x "-s" y)
        (test-eq EXIT_FAILURE <status>)
        (test-equal "" <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))
      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" x "-l" y)
        (test-eq EXIT_FAILURE <status>)
        (test-equal "" <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))
      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" "-l" y x)
        (test-eq EXIT_FAILURE <status>)
        (test-equal (format #f "(~S)" x) <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))
      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" x "-L" z)
        (test-eq EXIT_FAILURE <status>)
        (test-equal "" <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))
      (receive (<status> <stdout> <stderr>)
          (command-values lepton-cli "shell" "-L" z x)
        (test-eq EXIT_FAILURE <status>)
        (test-equal "" <stdout>)
        (test-assert (string-contains <stderr> "No such file or directory"))
        (test-assert (string-contains <stderr> x)))

      ;; Both x and y/z exist.
      (let ((x (string->file "(write (command-line)) (exit 100)" x)))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-s" y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-s\" ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-l" y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-l\" ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" "-l" y x)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S)(~S)" x x) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-L" z)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-L\" ~S)" x z) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" "-L" z x)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S)" x) <stdout>))

        (delete-file y)
        (rmdir z)
        ;; x exists, no y/z file.

        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-s" y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-s\" ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-l" y)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-l\" ~S)" x y) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" "-l" y x)
          (test-eq EXIT_FAILURE <status>)
          (test-equal "" <stdout>)
          (test-assert (string-contains <stderr> "No such file or directory"))
          (test-assert (string-contains <stderr> y)))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-L" z)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-L\" ~S)" x z) <stdout>))
        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" "-L" z x)
          (test-eq 100 <status>)
          (test-equal (format #f "(~S)" x) <stdout>))

        (receive (<status> <stdout> <stderr>)
            (command-values lepton-cli "shell" x "-c" "(exit 100)")
          (test-eq 100 <status>)
          (test-equal (format #f "(~S \"-c\" \"(exit 100)\")" x) <stdout>))
        )))

  ;; Clean up.
  (test-teardown))

(test-end "lepton-cli shell file arguments")
