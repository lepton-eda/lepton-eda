(use-modules (ice-9 receive))


(load-from-path "env.scm")


(define cwd (getcwd))
(define *testdir* (build-filename (getcwd) "config-tmp"))

;;; Setup/teardown directories/files needed by tests.
(define (test-setup)
  (mkdir *testdir*)
  (chdir *testdir*))

(define (test-teardown)
  (chdir cwd)
  (system* "rm" "-rf" *testdir*))

(define (delete-file* filename)
  (if (file-exists? filename)
      (delete-file filename)
      (begin (format (current-error-port)
                     "File ~S does not exist.\n"
                     filename)
             #f)))

;;; 'lepton-cli config' without arguments returns the name of the
;;; project config file in the current working directory.  The
;;; function canonicalize-path() is used to make sure the path is
;;; correct even if it contains symlinks.
(test-begin "lepton-cli config")

(test-group-with-cleanup "lepton-cli config"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout> "lepton.conf"))
    (test-assert (string-contains
                  (canonicalize-path (dirname (string-trim-right <stdout>
                                                                 #\newline)))
                  (canonicalize-path (getcwd)))))
  (test-teardown))

(test-end "lepton-cli config")


(test-begin "config -h")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-h")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-h" "redundant")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(test-end "config -h")


(test-begin "config --help")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "--help")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "--help" "redundant")
  (test-eq EXIT_SUCCESS <status>)
  (test-assert (string-contains <stdout> "Usage: lepton-cli config")))

(test-end "config --help")


(test-begin "config -ppath")

;;; '-p' without arguments.
(test-group-with-cleanup "config -ppath"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '-p' with non-existing directory.
(test-group-with-cleanup "config -pnon-existing-dir"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pnon-existing-dir")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '-p' with existing directory.
(test-group-with-cleanup "config -pexisting-dir"
  (test-setup)
  (mkdir "existing-dir")

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pexisting-dir")
    (test-eq EXIT_SUCCESS <status>)

    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path "existing-dir"))))

  ;; Clean up.
  (test-teardown))

;;; Check a key without value in a new directory.
(test-group-with-cleanup "config -ppath group [key]"
  (test-setup)
  (mkdir "path")

  ;; Make sure lepton.conf is missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; First, do not provide a key.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: You must specify both configuration group and key."))
    (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

  ;; Make sure lepton.conf is still missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; Now, check that specified group does not exist in config.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the config file.
  (test-run-success lepton-cli "config" "-ppath/" "somegroup" "somekey" "somevalue")
  ;; Make sure lepton.conf exists now.
  (test-assert (file-exists? "path/lepton.conf"))
  ;; The necessary group "group" is still missing.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the necessary group with some other key.
  ;; First check, that the key "somekey" is missing.
  (test-run-failure lepton-cli "config" "-ppath/" "group" "somekey")
  ;; Now, create the key "somekey".
  (test-run-success lepton-cli "config" "-ppath/" "group" "somekey" "somevalue")
  ;; The program still errors as we're looking for "key".
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'key'.")))

  ;; Let's eventually set it.
  (test-run-success lepton-cli "config" "-ppath/" "group" "key" "value")
  ;; All should go smoothly.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "somegroup" "somekey")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "somevalue\n"))

  ;; Let's change the value now.  I also use "./path" here to just
  ;; make sure such a form works OK.
  (test-run-success lepton-cli "config" "-p./path/" "group" "key" "other-value")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "other-value\n"))

  ;; Now make sure there is no config file in CWD, just in case :-)
  (test-assert (not (file-exists? "lepton.conf")))

  ;; lepton-cli simply ignores redundant args.
  (test-run-success lepton-cli "config" "-ppath/" "group" "key" "value" "redundant")
  ;; Clean up.
  (test-teardown))

(test-end "config -ppath")


(test-begin "config -ppath1/path2/path3")

;;; Test that subdirectories inherit config file settings from
;;; their parent directories.
(test-group-with-cleanup "config -ppath1/path2/path3"
  (test-setup)
  (system*  "mkdir" "-p" "path1/path2/path3")

  (test-run-success lepton-cli "config" "-ppath1/" "group" "key" "value")
  (test-assert (not (file-exists? "lepton.conf")))
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-assert (not (file-exists? "path1/path2/lepton.conf")))
  (test-assert (not (file-exists? "path1/path2/path3/lepton.conf")))

  ;; We should get the same key value set in all three directories.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))

  ;; Now, set up different keys in different directories.
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "-ppath1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-run-success lepton-cli "config" "-ppath1/path2/" "group" "key" "val2")
  (test-assert (not (file-exists? "path1/path2/lepton.conf")))
  (test-run-success lepton-cli "config" "-ppath1/path2/path3/" "group" "key" "val3")
  (test-assert (not (file-exists? "path1/path2/path3/lepton.conf")))
  ;; This doesn't work this way.  If some parent path contains
  ;; config file, a new config file for subdirectory is not
  ;; created.  So let's remove lepton.conf in path1/, and then
  ;; create configs starting from path3/, that is, vice versa.
  (delete-file* "path1/lepton.conf")
  (test-run-success lepton-cli "config" "-ppath1/path2/path3/" "group" "key" "val3")
  (test-assert (file-exists? "path1/path2/path3/lepton.conf"))
  (test-run-success lepton-cli "config" "-ppath1/path2/" "group" "key" "val2")
  (test-assert (file-exists? "path1/path2/lepton.conf"))
  (test-run-success lepton-cli "config" "-ppath1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))

  ;; These commands are now working as expected.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val1\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val2\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-ppath1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val3\n"))

  ;; Now other way around, we use the same group but different
  ;; keys and different values in subdirs.
  (system*  "mkdir" "-p" "dir1/dir2/dir3")

  ;; First, set up lepton.conf files in the three directories.
  (test-run-success lepton-cli "config" "-pdir1/dir2/dir3" "group" "foo" "a")
  (test-assert (file-exists? "dir1/dir2/dir3/lepton.conf"))
  (test-assert (not (file-exists? "dir1/dir2/lepton.conf")))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "-pdir1/dir2/" "group" "bar" "b")
  (test-assert (file-exists? "dir1/dir2/lepton.conf"))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "-pdir1/" "group" "baz" "c")
  (test-assert (file-exists? "dir1/lepton.conf"))
  (test-assert (not (file-exists? "lepton.conf")))

  ;; Now check what is set.  It seems, if there are config files
  ;; in subdirs, parent config is not inherited.

  ;; Only "foo" key exists in dir1/dir2/dir3/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/dir3/" "group" "foo")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "a\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/dir3/" "group" "bar")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'bar'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/dir3/" "group" "baz")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'baz'.")))

  ;; Only "bar" key exists in dir1/dir2/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/" "group" "foo")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'foo'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/" "group" "bar")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "b\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/dir2/" "group" "baz")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'baz'.")))

  ;; Only "baz" key exists in dir1/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/" "group" "foo")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'foo'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/" "group" "bar")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'bar'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-pdir1/" "group" "baz")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "c\n"))

  ;; Clean up.
  (test-teardown))

(test-end "config -ppath1/path2/path3")


(test-begin "config --project")

;;; '--project' without arguments.
(test-group-with-cleanup "config --project"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '--project' with non-existing directory.
(test-group-with-cleanup "config --project=non-existing-dir"
  (test-setup)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=non-existing-dir")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Clean up.
  (test-teardown))

;;; '--project' with existing directory.
(test-group-with-cleanup "config --project=existing-dir"
  (test-setup)
  (mkdir "existing-dir")

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=existing-dir")
    (test-eq EXIT_SUCCESS <status>)

    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path "existing-dir"))))

  ;; Clean up.
  (test-teardown))

;;; Check a key without value in a new directory.
(test-group-with-cleanup "config --project=path group [key]"
  (test-setup)
  (mkdir "path")

  ;; Make sure lepton.conf is missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; First, do not provide a key.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: You must specify both configuration group and key."))
    (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

  ;; Make sure lepton.conf is still missing.
  (test-assert (not (file-exists? "path/lepton.conf")))
  ;; Now, check that specified group does not exist in config.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the config file.
  (test-run-success lepton-cli "config" "--project=path/" "somegroup" "somekey" "somevalue")
  ;; Make sure lepton.conf exists now.
  (test-assert (file-exists? "path/lepton.conf"))
  ;; The necessary group "group" is still missing.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))

  ;; Let's create the necessary group with some other key.
  ;; First check, that the key "somekey" is missing.
  (test-run-failure lepton-cli "config" "--project=path/" "group" "somekey")
  ;; Now, create the key "somekey".
  (test-run-success lepton-cli "config" "--project=path/" "group" "somekey" "somevalue")
  ;; The program still errors as we're looking for "key".
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'key'.")))

  ;; Let's eventually set it.
  (test-run-success lepton-cli "config" "--project=path/" "group" "key" "value")
  ;; All should go smoothly.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "somegroup" "somekey")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "somevalue\n"))

  ;; Let's change the value now.  I also use "./path" here to just
  ;; make sure such a form works OK.
  (test-run-success lepton-cli "config" "--project=./path/" "group" "key" "other-value")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "other-value\n"))

  ;; Now make sure there is no config file in CWD, just in case :-)
  (test-assert (not (file-exists? "lepton.conf")))

  ;; lepton-cli simply ignores redundant args.
  (test-run-success lepton-cli "config" "--project=path/" "group" "key" "value" "redundant")
  ;; Clean up.
  (test-teardown))

(test-end "config --project")


(test-begin "config --project=path1/path2/path3")

;;; Test that subdirectories inherit config file settings from
;;; their parent directories.
(test-group-with-cleanup "config --project=path1/path2/path3"
  (test-setup)
  (system*  "mkdir" "-p" "path1/path2/path3")

  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "value")
  (test-assert (not (file-exists? "lepton.conf")))
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-assert (not (file-exists? "path1/path2/lepton.conf")))
  (test-assert (not (file-exists? "path1/path2/path3/lepton.conf")))

  ;; We should get the same key value set in all three directories.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "value\n"))

  ;; Now, set up different keys in different directories.
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/" "group" "key" "val2")
  (test-assert (not (file-exists? "path1/path2/lepton.conf")))
  (test-run-success lepton-cli "config" "--project=path1/path2/path3/" "group" "key" "val3")
  (test-assert (not (file-exists? "path1/path2/path3/lepton.conf")))
  ;; This doesn't work this way.  If some parent path contains
  ;; config file, a new config file for subdirectory is not
  ;; created.  So let's remove lepton.conf in path1/, and then
  ;; create configs starting from path3/, that is, vice versa.
  (delete-file* "path1/lepton.conf")
  (test-run-success lepton-cli "config" "--project=path1/path2/path3/" "group" "key" "val3")
  (test-assert (file-exists? "path1/path2/path3/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/" "group" "key" "val2")
  (test-assert (file-exists? "path1/path2/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))

  ;; These commands are now working as expected.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val1\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val2\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "val3\n"))

  ;; Now other way around, we use the same group but different
  ;; keys and different values in subdirs.
  (system*  "mkdir" "-p" "dir1/dir2/dir3")

  ;; First, set up lepton.conf files in the three directories.
  (test-run-success lepton-cli "config" "--project=dir1/dir2/dir3" "group" "foo" "a")
  (test-assert (file-exists? "dir1/dir2/dir3/lepton.conf"))
  (test-assert (not (file-exists? "dir1/dir2/lepton.conf")))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=dir1/dir2/" "group" "bar" "b")
  (test-assert (file-exists? "dir1/dir2/lepton.conf"))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=dir1/" "group" "baz" "c")
  (test-assert (file-exists? "dir1/lepton.conf"))
  (test-assert (not (file-exists? "lepton.conf")))

  ;; Now check what is set.  It seems, if there are config files
  ;; in subdirs, parent config is not inherited.

  ;; Only "foo" key exists in dir1/dir2/dir3/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/dir3/" "group" "foo")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "a\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/dir3/" "group" "bar")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'bar'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/dir3/" "group" "baz")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'baz'.")))

  ;; Only "bar" key exists in dir1/dir2/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/" "group" "foo")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'foo'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/" "group" "bar")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "b\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/dir2/" "group" "baz")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'baz'.")))

  ;; Only "baz" key exists in dir1/.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/" "group" "foo")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'foo'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/" "group" "bar")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have key 'bar'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=dir1/" "group" "baz")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "c\n"))

  ;; Clean up.
  (test-teardown))

(test-end "config --project=path1/path2/path3")


(test-begin "config -p")

(test-group-with-cleanup "config -p"
  (test-setup)

  ;; '-p' without arguments.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p")
    (test-eq EXIT_SUCCESS <status>)
    (let ((output (string-trim-right <stdout> #\newline)))
      (test-equal (basename output) "lepton.conf")
      (test-equal (canonicalize-path (dirname output))
        (canonicalize-path (getcwd)))))

  ;; Now, check a key without value in a new directory.
  (mkdir "path")

  (test-assert (not (file-exists? "lepton.conf")))

  ;; "path" is used as a config group here :-)
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path" "group")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'path'.")))

  ;; Let's try with a definite value for a key.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path" "group" "key")
    ;; Well, once again.  There was no key "somekey" since here it
    ;; is considered to be a value :-)
    (test-expect-fail 1)
    (test-eq EXIT_FAILURE <status>))

  ;; Config file with wrong values has been created in the current
  ;; directory.
  (test-expect-fail 1)
  (test-assert (not (file-exists? "lepton.conf")))

  ;; Let's try to set key=value and check what it gives.
  (test-run-success lepton-cli "config" "-p" "path" "group" "key" "value")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    ;; This won't work since "path" is considered to be a group,
    ;; and "group" to be a value :-)
    (test-expect-fail 1)
    (test-equal <stdout> "value\n"))

  ;; Redundant arguments are ignored.
  (test-run-success lepton-cli "config" "-p" "path" "group" "key" "value" "redundant")

  ;; Clean up.
  (test-teardown))

(test-end "config -p")


;;; Test '-p' (with space before argument) with config files in
;;; subdirectories.
(test-begin "config -p path1/path2/path3")

(test-group-with-cleanup "config -p path1/path2/path3"
  (test-setup)
  (system*  "mkdir" "-p" "path1/path2/path3")

  ;; Test '-p' with lepton.conf in path1/ only.
  (system* lepton-cli "config" "-p" "path1/" "group" "key" "value")
  (test-expect-fail 2)
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-assert (not (file-exists? "./lepton.conf")))

  (test-equal "[path1/]\ngroup=key\n"
    (with-input-from-file (build-filename (getcwd) "lepton.conf")
      (lambda () (get-string-all (current-input-port)))))

  ;; The newly created config file may get in our way, remove it.
  (delete-file* "lepton.conf")

  ;; Any other tests for "-p path" make no sense since with this
  ;; option lepton-cli interprets other arguments in a wrong way.
  ;; So let's use --project to set up initial config files.

  (test-run-success lepton-cli "config" "--project=path1/path2/path3/" "group" "key" "val3")
  (test-assert (file-exists? "path1/path2/path3/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/path2/" "group" "key" "val2")
  (test-assert (file-exists? "path1/path2/lepton.conf"))
  (test-run-success lepton-cli "config" "--project=path1/" "group" "key" "val1")
  (test-assert (file-exists? "path1/lepton.conf"))
  (test-assert (not (file-exists? "lepton.conf")))

  ;; '-p path' does not work.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path1/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-expect-fail 1)
    (test-equal <stdout> "val1\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path1/path2/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-expect-fail 1)
    (test-equal <stdout> "val2\n"))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p" "path1/path2/path3/" "group" "key")
    (test-eq EXIT_SUCCESS <status>)
    (test-expect-fail 1)
    (test-equal <stdout> "val3\n"))

  ;; Now another way, we'll use different keys.
  (system*  "mkdir" "-p" "dir1/dir2/dir3")

  ;; We should be confident there is no config file in the current
  ;; directory.  Otherwise lepton-cli even with the option
  ;; --project will use it for storing settings.
  (test-expect-fail 1)
  (test-assert (not (file-exists? "lepton.conf")))
  (delete-file* "lepton.conf")

  ;; First, set up lepton.conf files in the three directories.
  (test-run-success lepton-cli "config" "--project=dir1/dir2/dir3" "group" "foo" "a")
  (test-assert (file-exists? "dir1/dir2/dir3/lepton.conf"))
  (test-assert (not (file-exists? "dir1/dir2/lepton.conf")))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=dir1/dir2/" "group" "bar" "b")
  (test-assert (file-exists? "dir1/dir2/lepton.conf"))
  (test-assert (not (file-exists? "dir1/lepton.conf")))
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "--project=dir1/" "group" "baz" "c")
  (test-assert (file-exists? "dir1/lepton.conf"))
  (test-assert (not (file-exists? "lepton.conf")))

  ;; Check if there is no config file in the current directory.
  (test-assert (not (file-exists? "lepton.conf")))

  ;; Now test output with the option '-p dir' where the option
  ;; and its argument are separated with space.

  ;; Those three don't work as '-p dir' is not supported by lepton-cli.
  (test-run-success lepton-cli "config" "-p" "dir1/dir2/dir3" "group" "foo")

  ;; As it stands, it creates a config file in the current working
  ;; directory.
  (test-expect-fail 1)
  (test-assert (not (file-exists? "lepton.conf")))

  ;; And its contents is strange :-)
  (test-equal "[dir1/dir2/dir3]\ngroup=foo\n"
    (with-input-from-file (build-filename (getcwd) "lepton.conf")
      (lambda () (get-string-all (current-input-port)))))
  ;; Thus, tests with other dirs and keys make no sense here.

  ;; Clean up.
  (test-teardown))

(test-end "config -p path1/path2/path3")


(test-begin "config: unreadable file")

(test-group-with-cleanup "group: config: unreadable file"
  (test-setup)

  (mkdir "path")
  (test-assert (file-exists? "path"))
  ;; Create lepton.conf in path/.
  (test-run-success lepton-cli "config" "--project=path/" "group" "key" "value")
  (test-assert (file-exists? "path/lepton.conf"))

  ;; Make it unreadable.
  (when (file-exists? "path/lepton.conf")
    (chmod "path/lepton.conf" #o000)
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--project=path/" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-assert (string-contains <stderr> "WARNING: Could not load"))
      (test-assert (string-contains <stderr> "lepton.conf"))))
  ;; Clean up.
  (test-teardown))

(test-end "config: unreadable file")

(test-begin "config: unreadable directory")
(test-group-with-cleanup "group: config: unreadable directory"
  (test-setup)
  (mkdir "path-unreadable")
  ;; Create lepton.conf in path-unreadable/.
  (test-run-success lepton-cli "config" "--project=path-unreadable/" "group" "key" "value")

  (test-assert (file-exists? (build-filename (getcwd)
                                             "path-unreadable"
                                             "lepton.conf")))

  (chmod "path-unreadable/" #o000)

  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path-unreadable/")
    (test-eq EXIT_SUCCESS <status>)
    (test-assert (string-contains <stdout>
                                  (build-filename "path-unreadable" "lepton.conf"))))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path-unreadable/" "group" "key")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "WARNING: Could not load"))
    (test-assert (string-contains <stderr> "ERROR: Configuration does not have group 'group'.")))
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "--project=path-unreadable/" "group" "key" "value")
    (test-eq EXIT_FAILURE <status>)
    (test-assert (string-contains <stderr> "WARNING: Could not load"))
    (test-assert (string-contains <stderr> "path-unreadable")))

  (chmod "path-unreadable/" #o777)

  ;; Clean up.
  (test-teardown))

(test-end "config: unreadable directory")


(test-begin "config -c")

(test-group-with-cleanup "config -c (1)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (homedir (build-filename *testdir* "home" "user")))
    (system* "mkdir" "-p" homedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Unset $XDG_CACHE_HOME.
    (putenv "XDG_CACHE_HOME")

    ;; Check location of cache config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename homedir ".cache/lepton-eda/gui.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

;;; The same tests though for XDG_CACHE_HOME.
(test-group-with-cleanup "config -c (2)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (XDG_CACHE_HOME (getenv "XDG_CACHE_HOME"))
        (homedir (build-filename *testdir* "home" "user"))
        (xdgcachedir (build-filename *testdir* "xdghome" "user")))
    (system* "mkdir" "-p" homedir)
    (system* "mkdir" "-p" xdgcachedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Set $XDG_CACHE_HOME to another directory.
    (putenv (string-append "XDG_CACHE_HOME=" xdgcachedir))

    ;; Check location of cache config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename xdgcachedir "lepton-eda" "gui.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-c" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if XDG_CACHE_HOME
        (putenv (string-append "XDG_CACHE_HOME=" XDG_CACHE_HOME))
        (putenv "XDG_CACHE_HOME"))
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

(test-end "config -c")


(test-begin "config --cache")

(test-group-with-cleanup "config --cache (1)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (homedir (build-filename *testdir* "home" "user")))
    (system* "mkdir" "-p" homedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Unset $XDG_CACHE_HOME.
    (putenv "XDG_CACHE_HOME")

    ;; Check location of cache config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename homedir ".cache/lepton-eda/gui.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

;;; The same tests though for XDG_CACHE_HOME.
(test-group-with-cleanup "config --cache (2)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (XDG_CACHE_HOME (getenv "XDG_CACHE_HOME"))
        (homedir (build-filename *testdir* "home" "user"))
        (xdgcachedir (build-filename *testdir* "xdghome" "user")))
    (system* "mkdir" "-p" homedir)
    (system* "mkdir" "-p" xdgcachedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Set $XDG_CACHE_HOME to another directory.
    (putenv (string-append "XDG_CACHE_HOME=" xdgcachedir))

    ;; Check location of cache config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename xdgcachedir "lepton-eda" "gui.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--cache" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if XDG_CACHE_HOME
        (putenv (string-append "XDG_CACHE_HOME=" XDG_CACHE_HOME))
        (putenv "XDG_CACHE_HOME"))
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

(test-end "config --cache")


(test-begin "config -u")

(test-group-with-cleanup "config -u (1)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (homedir (build-filename *testdir* "home" "user")))
    (system* "mkdir" "-p" homedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Unset $XDG_CONFIG_HOME.
    (putenv "XDG_CONFIG_HOME")

    ;; Check location of user config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename homedir ".config/lepton-eda/lepton-user.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

;;; The same tests though for XDG_CONFIG_HOME.
(test-group-with-cleanup "config -u (2)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (XDG_CONFIG_HOME (getenv "XDG_CONFIG_HOME"))
        (homedir (build-filename *testdir* "home" "user"))
        (xdgconfigdir (build-filename *testdir* "xdghome" "user")))
    (system* "mkdir" "-p" homedir)
    (system* "mkdir" "-p" xdgconfigdir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Set $XDG_CONFIG_HOME to another directory.
    (putenv (string-append "XDG_CONFIG_HOME=" xdgconfigdir))

    ;; Check location of user config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename xdgconfigdir "lepton-eda" "lepton-user.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "-u" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if XDG_CONFIG_HOME
        (putenv (string-append "XDG_CONFIG_HOME=" XDG_CONFIG_HOME))
        (putenv "XDG_CONFIG_HOME"))
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

(test-end "config -u")


(test-begin "config --user")

(test-group-with-cleanup "config --user (1)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (homedir (build-filename *testdir* "home" "user")))
    (system* "mkdir" "-p" homedir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Unset $XDG_CONFIG_HOME.
    (putenv "XDG_CONFIG_HOME")

    ;; Check location of user config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename homedir ".config/lepton-eda/lepton-user.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

;;; The same tests though for XDG_CONFIG_HOME.
(test-group-with-cleanup "config --user (2)"
  (test-setup)

  ;; Save environment variables to restore them later.
  (let ((HOME (getenv "HOME"))
        (XDG_CONFIG_HOME (getenv "XDG_CONFIG_HOME"))
        (homedir (build-filename *testdir* "home" "user"))
        (xdgconfigdir (build-filename *testdir* "xdghome" "user")))
    (system* "mkdir" "-p" homedir)
    (system* "mkdir" "-p" xdgconfigdir)
    ;; Set $HOME to another directory.
    (putenv (string-append "HOME=" homedir))
    ;; Set $XDG_CONFIG_HOME to another directory.
    (putenv (string-append "XDG_CONFIG_HOME=" xdgconfigdir))

    ;; Check location of user config file.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal (string-trim-right <stdout> #\newline)
        (build-filename xdgconfigdir "lepton-eda" "lepton-user.conf")))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-cli "config" "--user" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore environment variables.
    (if XDG_CONFIG_HOME
        (putenv (string-append "XDG_CONFIG_HOME=" XDG_CONFIG_HOME))
        (putenv "XDG_CONFIG_HOME"))
    (if HOME
        (putenv (string-append "HOME=" HOME))
        (putenv "HOME")))

  ;; Clean up.
  (test-teardown))

(test-end "config --user")


;;; Backup stuff.
(define (backup-file name)
  (define (replace/ c)
    (if (eq? c #\/) #\_ c))
  (string-map replace/ name))

(define sys-config-files
  (begin
    (test-setup)
    (system (string-append lepton-cli
                           " shell -c '(use-modules (lepton os)) (write (sys-config-dirs))' > sys-config-dirs"))
    (let ((dirs (with-input-from-file "sys-config-dirs" read)))
      (test-teardown)
      (map (lambda (dir) (build-filename dir "lepton-system.conf")) dirs))))

(define (backup-sys-configs)
  (define (backup-config conf)
    (when (file-exists? conf)
      (format (current-error-port)
              "sudo mv ~A ~A\n" conf (backup-file conf))
      (system* "sudo" "mv" conf (backup-file conf))))
  (for-each backup-config sys-config-files))

(define (restore-sys-configs)
  (define (restore-config conf)
    (when (file-exists? conf)
      (format (current-error-port) "sudo rm ~A\n" conf)
      (system* "sudo" "rm" conf))
    (when (file-exists? (backup-file conf))
      (format (current-error-port)
              "sudo mv ~A ~A\n" (backup-file conf) conf)
      (system* "sudo" "mv" (backup-file conf) conf)))
  (for-each restore-config sys-config-files))


;;; Tests for system config usually require superuser permissions,
;;; so most of them are disabled by default.  Set the environment
;;; variable LEPTON_SUDO_TESTS to enable them.
;;; Warning: this is dangerous!
(test-begin "config -s")

;;; Skip the next group of tests if the environment variable
;;; LEPTON_SUDO_TESTS is not set.
(unless (getenv "LEPTON_SUDO_TESTS")
  (test-skip "config -s (sudo)"))

(test-group-with-cleanup "config -s (sudo)"
  (test-setup)
  (backup-sys-configs)

  (let ((system-config
         (receive (<status> <stdout> <stderr>)
             (command-values lepton-cli "config" "-s")
           (test-eq EXIT_SUCCESS <status>)
           (test-assert (string-contains <stdout> (build-filename "lepton-eda" "lepton-system.conf")))
           ;; Name of the system config file.
           (string-trim-right <stdout> #\newline)))
        (backup (build-filename *testdir* "lepton-system.conf")))

    ;; Back up current system config file.
    (when (file-exists? system-config)
      (system* "sudo" "mv" system-config backup))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "-s" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values "sudo" lepton-export "config" "-s" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "-s" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values "sudo" lepton-export "config" "-s" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "-s" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore system config file, if any.
    (system* "sudo" "rm" system-config)
    (when (file-exists? backup)
      (system* "sudo" "mv" backup system-config)))

  ;; Clean up.
  (restore-sys-configs)
  (test-teardown))

(test-end "config -s")


;;; The same tests as for '-s'.
;;; Tests for system config usually require superuser permissions,
;;; so most of them are disabled by default.  Set the environment
;;; variable LEPTON_SUDO_TESTS to enable them.
;;; Warning: this is dangerous!
(test-begin "config --system")

;;; Skip the next group of tests if the environment variable
;;; LEPTON_SUDO_TESTS is not set.
(unless (getenv "LEPTON_SUDO_TESTS")
  (test-skip "config --system (sudo)"))

(test-group-with-cleanup "config --system (sudo)"
  (test-setup)
  (backup-sys-configs)

  (let ((system-config
         (receive (<status> <stdout> <stderr>)
             (command-values lepton-cli "config" "--system")
           (test-eq EXIT_SUCCESS <status>)
           (test-assert (string-contains <stdout> (build-filename "lepton-eda" "lepton-system.conf")))
           ;; Name of the system config file.
           (string-trim-right <stdout> #\newline)))
        (backup (build-filename *testdir* "lepton-system.conf")))

    ;; Back up current system config file.
    (when (file-exists? system-config)
      (system* "sudo" "mv" system-config backup))

    ;; Check for some unexisting key.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "--system" "group" "key")
      (test-eq EXIT_FAILURE <status>)
      (test-equal <stderr> "ERROR: Configuration does not have group 'group'.\n"))
    ;; Now set the key to a value.
    (receive (<status> <stdout> <stderr>)
        (command-values "sudo" lepton-export "config" "--system" "group" "key" "value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "--system" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "value\n"))
    ;; Change the value.
    (receive (<status> <stdout> <stderr>)
        (command-values "sudo" lepton-export "config" "--system" "group" "key" "other-value")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> ""))
    ;; Check if the key is now set to another value.
    (receive (<status> <stdout> <stderr>)
        (command-values lepton-export "config" "--system" "group" "key")
      (test-eq EXIT_SUCCESS <status>)
      (test-equal <stdout> "other-value\n"))

    ;; Restore system config file, if any.
    (system* "sudo" "rm" system-config)
    (when (file-exists? backup)
      (system* "sudo" "mv" backup system-config)))

  ;; Clean up.
  (restore-sys-configs)
  (test-teardown))

(test-end "config --system")


(test-begin "config multiple stores")

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-p" "-s")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-p" "-u")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-s" "-p")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-s" "-u")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-u" "-p")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-u" "-s")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-p" "-s" "-u")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-p" "-u" "-s")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-s" "-p" "-u")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-s" "-u" "-p")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-u" "-p" "-s")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "-u" "-s" "-p")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(receive (<status> <stdout> <stderr>)
    (command-values lepton-cli "config" "--project=./a" "--project=./b")
  (test-eq EXIT_FAILURE <status>)
  (test-assert (string-contains <stderr> "ERROR: You may only specify a single configuration store."))
  (test-assert (string-contains <stderr> "Run `lepton-cli config --help' for more information.")))

(test-end "config multiple stores")


(test-begin "config --project in subdir")
(test-group-with-cleanup "config --project in subdir"
  (test-setup)

  ;; Make lepton.conf in test directory.
  (test-run-success lepton-cli "config" "group" "key" "value")
  (test-assert (file-exists? "lepton.conf"))

  (system* "mkdir" "path")
  (chdir "path")

  ;; Try to make lepton.conf in subdirectory.
  (test-assert (not (file-exists? "lepton.conf")))
  (test-run-success lepton-cli "config" "a" "b" "c")
  ;; The config file does not exist, anyway.
  (test-assert (not (file-exists? "lepton.conf")))
  ;; Check if the new config setting has been still saved.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "a" "b")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal <stdout> "c\n"))
  ;; Check where the new config setting is stored.
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal (canonicalize-path (string-trim-right <stdout> #\newline))
      (canonicalize-path (build-filename *testdir* "lepton.conf"))))
  ;; Copy the config file from the parent directory to the
  ;; subdirectory and check what config will be now processed.
  (copy-file "../lepton.conf" "./lepton.conf")
  (receive (<status> <stdout> <stderr>)
      (command-values lepton-cli "config" "-p")
    (test-eq EXIT_SUCCESS <status>)
    (test-equal (canonicalize-path (string-trim-right <stdout> #\newline))
      (canonicalize-path (build-filename (getcwd) "lepton.conf"))))

  ;; Clean up.
  (test-teardown))
(test-end "config --project in subdir")
